#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.6.1055.0.
// 
namespace ironfist {
    using namespace System;
    ref class NewDataSet;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class NewDataSet : public ::System::Data::DataSet {
        public : ref class creaturesDataTable;
        public : ref class creatureDataTable;
        public : ref class damageDataTable;
        public : ref class _random_spawnDataTable;
        public : ref class _creature_attributeDataTable;
        public : ref class creaturesRow;
        public : ref class creatureRow;
        public : ref class damageRow;
        public : ref class _random_spawnRow;
        public : ref class _creature_attributeRow;
        public : ref class creaturesRowChangeEvent;
        public : ref class creatureRowChangeEvent;
        public : ref class damageRowChangeEvent;
        public : ref class _random_spawnRowChangeEvent;
        public : ref class _creature_attributeRowChangeEvent;
        
        private: ironfist::NewDataSet::creaturesDataTable^  tablecreatures;
        
        private: ironfist::NewDataSet::creatureDataTable^  tablecreature;
        
        private: ironfist::NewDataSet::damageDataTable^  tabledamage;
        
        private: ironfist::NewDataSet::_random_spawnDataTable^  table_random_spawn;
        
        private: ironfist::NewDataSet::_creature_attributeDataTable^  table_creature_attribute;
        
        private: ::System::Data::DataRelation^  relationcreatures_creature;
        
        private: ::System::Data::DataRelation^  relationcreature_damage;
        
        private: ::System::Data::DataRelation^  _relationcreature_random_spawn;
        
        private: ::System::Data::DataRelation^  _relationcreature_creature_attribute;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void creaturesRowChangeEventHandler(::System::Object^  sender, ironfist::NewDataSet::creaturesRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void creatureRowChangeEventHandler(::System::Object^  sender, ironfist::NewDataSet::creatureRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void damageRowChangeEventHandler(::System::Object^  sender, ironfist::NewDataSet::damageRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void _random_spawnRowChangeEventHandler(::System::Object^  sender, ironfist::NewDataSet::_random_spawnRowChangeEvent^  e);
        
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        delegate System::Void _creature_attributeRowChangeEventHandler(::System::Object^  sender, ironfist::NewDataSet::_creature_attributeRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property ironfist::NewDataSet::creaturesDataTable^  creatures {
            ironfist::NewDataSet::creaturesDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property ironfist::NewDataSet::creatureDataTable^  creature {
            ironfist::NewDataSet::creatureDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property ironfist::NewDataSet::damageDataTable^  damage {
            ironfist::NewDataSet::damageDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property ironfist::NewDataSet::_random_spawnDataTable^  _random_spawn {
            ironfist::NewDataSet::_random_spawnDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property ironfist::NewDataSet::_creature_attributeDataTable^  _creature_attribute {
            ironfist::NewDataSet::_creature_attributeDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializecreatures();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializecreature();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerializedamage();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerialize_random_spawn();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean ShouldSerialize_creature_attribute();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class creaturesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columncreatures_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::creaturesRowChangeEventHandler^  creaturesRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::creaturesRowChangeEventHandler^  creaturesRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::creaturesRowChangeEventHandler^  creaturesRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::creaturesRowChangeEventHandler^  creaturesRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            creaturesDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            creaturesDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            creaturesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  creatures_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ironfist::NewDataSet::creaturesRow^  default [::System::Int32 ] {
                ironfist::NewDataSet::creaturesRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddcreaturesRow(ironfist::NewDataSet::creaturesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ironfist::NewDataSet::creaturesRow^  AddcreaturesRow();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ironfist::NewDataSet::creaturesRow^  NewcreaturesRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovecreaturesRow(ironfist::NewDataSet::creaturesRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class creatureDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnid;
            
            private: ::System::Data::DataColumn^  column_name_singular;
            
            private: ::System::Data::DataColumn^  column_name_plural;
            
            private: ::System::Data::DataColumn^  columnicn;
            
            private: ::System::Data::DataColumn^  columnfrm;
            
            private: ::System::Data::DataColumn^  columncost;
            
            private: ::System::Data::DataColumn^  column_fight_value;
            
            private: ::System::Data::DataColumn^  column_fight_value_aux;
            
            private: ::System::Data::DataColumn^  columngrowth;
            
            private: ::System::Data::DataColumn^  columnhp;
            
            private: ::System::Data::DataColumn^  columnfaction;
            
            private: ::System::Data::DataColumn^  columnspeed;
            
            private: ::System::Data::DataColumn^  columnattack;
            
            private: ::System::Data::DataColumn^  columndefense;
            
            private: ::System::Data::DataColumn^  columnshots;
            
            private: ::System::Data::DataColumn^  column_short_name;
            
            private: ::System::Data::DataColumn^  columncreature_Id;
            
            private: ::System::Data::DataColumn^  columncreatures_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::creatureRowChangeEventHandler^  creatureRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::creatureRowChangeEventHandler^  creatureRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::creatureRowChangeEventHandler^  creatureRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::creatureRowChangeEventHandler^  creatureRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            creatureDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            creatureDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            creatureDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  idColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _name_singularColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _name_pluralColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  icnColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  frmColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  costColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _fight_valueColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _fight_value_auxColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  growthColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  hpColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  factionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  speedColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  attackColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  defenseColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  shotsColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  _short_nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  creature_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  creatures_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ironfist::NewDataSet::creatureRow^  default [::System::Int32 ] {
                ironfist::NewDataSet::creatureRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AddcreatureRow(ironfist::NewDataSet::creatureRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ironfist::NewDataSet::creatureRow^  AddcreatureRow(
                        System::Int32 id, 
                        System::String^  _name_singular, 
                        System::String^  _name_plural, 
                        System::String^  icn, 
                        System::String^  frm, 
                        System::Int32 cost, 
                        System::Int32 _fight_value, 
                        System::Int32 _fight_value_aux, 
                        System::Int32 growth, 
                        System::Int32 hp, 
                        System::Int32 faction, 
                        System::Int32 speed, 
                        System::Int32 attack, 
                        System::Int32 defense, 
                        System::Int32 shots, 
                        System::String^  _short_name, 
                        ironfist::NewDataSet::creaturesRow^  parentcreaturesRowBycreatures_creature);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ironfist::NewDataSet::creatureRow^  NewcreatureRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovecreatureRow(ironfist::NewDataSet::creatureRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class damageDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnminimum;
            
            private: ::System::Data::DataColumn^  columnmaximum;
            
            private: ::System::Data::DataColumn^  columncreature_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::damageRowChangeEventHandler^  damageRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::damageRowChangeEventHandler^  damageRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::damageRowChangeEventHandler^  damageRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::damageRowChangeEventHandler^  damageRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            damageDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            damageDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            damageDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  minimumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  maximumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  creature_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ironfist::NewDataSet::damageRow^  default [::System::Int32 ] {
                ironfist::NewDataSet::damageRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void AdddamageRow(ironfist::NewDataSet::damageRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ironfist::NewDataSet::damageRow^  AdddamageRow(System::Int32 minimum, System::Int32 maximum, ironfist::NewDataSet::creatureRow^  parentcreatureRowBycreature_damage);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ironfist::NewDataSet::damageRow^  NewdamageRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void RemovedamageRow(ironfist::NewDataSet::damageRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class _random_spawnDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnminimum;
            
            private: ::System::Data::DataColumn^  columnmaximum;
            
            private: ::System::Data::DataColumn^  columncreature_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::_random_spawnRowChangeEventHandler^  _random_spawnRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::_random_spawnRowChangeEventHandler^  _random_spawnRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::_random_spawnRowChangeEventHandler^  _random_spawnRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::_random_spawnRowChangeEventHandler^  _random_spawnRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _random_spawnDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _random_spawnDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _random_spawnDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  minimumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  maximumColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  creature_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ironfist::NewDataSet::_random_spawnRow^  default [::System::Int32 ] {
                ironfist::NewDataSet::_random_spawnRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Add_random_spawnRow(ironfist::NewDataSet::_random_spawnRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ironfist::NewDataSet::_random_spawnRow^  Add_random_spawnRow(System::Int32 minimum, System::Int32 maximum, ironfist::NewDataSet::creatureRow^  _parentcreatureRowBycreature_random_spawn);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ironfist::NewDataSet::_random_spawnRow^  New_random_spawnRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Remove_random_spawnRow(ironfist::NewDataSet::_random_spawnRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        [System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class _creature_attributeDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columncreature_Id;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::_creature_attributeRowChangeEventHandler^  _creature_attributeRowChanging;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::_creature_attributeRowChangeEventHandler^  _creature_attributeRowChanged;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::_creature_attributeRowChangeEventHandler^  _creature_attributeRowDeleting;
            
            public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            event ironfist::NewDataSet::_creature_attributeRowChangeEventHandler^  _creature_attributeRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _creature_attributeDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _creature_attributeDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _creature_attributeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataColumn^  creature_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ironfist::NewDataSet::_creature_attributeRow^  default [::System::Int32 ] {
                ironfist::NewDataSet::_creature_attributeRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Add_creature_attributeRow(ironfist::NewDataSet::_creature_attributeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ironfist::NewDataSet::_creature_attributeRow^  Add_creature_attributeRow(System::String^  name, ironfist::NewDataSet::creatureRow^  _parentcreatureRowBycreature_creature_attribute);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ironfist::NewDataSet::_creature_attributeRow^  New_creature_attributeRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Remove_creature_attributeRow(ironfist::NewDataSet::_creature_attributeRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class creaturesRow : public ::System::Data::DataRow {
            
            private: ironfist::NewDataSet::creaturesDataTable^  tablecreatures;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            creaturesRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 creatures_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< ironfist::NewDataSet::creatureRow^  >^  GetcreatureRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class creatureRow : public ::System::Data::DataRow {
            
            private: ironfist::NewDataSet::creatureDataTable^  tablecreature;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            creatureRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  _name_singular {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  _name_plural {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  icn {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  frm {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 cost {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _fight_value {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 _fight_value_aux {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 growth {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 hp {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 faction {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 speed {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 attack {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 defense {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 shots {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  _short_name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 creature_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 creatures_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ironfist::NewDataSet::creaturesRow^  creaturesRow {
                ironfist::NewDataSet::creaturesRow^  get();
                System::Void set(ironfist::NewDataSet::creaturesRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Iscreatures_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setcreatures_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< ironfist::NewDataSet::damageRow^  >^  GetdamageRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< ironfist::NewDataSet::_random_spawnRow^  >^  _Getrandom_spawnRows();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            cli::array< ironfist::NewDataSet::_creature_attributeRow^  >^  _Getcreature_attributeRows();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class damageRow : public ::System::Data::DataRow {
            
            private: ironfist::NewDataSet::damageDataTable^  tabledamage;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            damageRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 minimum {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 maximum {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 creature_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ironfist::NewDataSet::creatureRow^  creatureRow {
                ironfist::NewDataSet::creatureRow^  get();
                System::Void set(ironfist::NewDataSet::creatureRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Iscreature_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setcreature_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class _random_spawnRow : public ::System::Data::DataRow {
            
            private: ironfist::NewDataSet::_random_spawnDataTable^  table_random_spawn;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _random_spawnRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 minimum {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 maximum {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 creature_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ironfist::NewDataSet::creatureRow^  creatureRow {
                ironfist::NewDataSet::creatureRow^  get();
                System::Void set(ironfist::NewDataSet::creatureRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Iscreature_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setcreature_IdNull();
        };
        
        public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
        ref class _creature_attributeRow : public ::System::Data::DataRow {
            
            private: ironfist::NewDataSet::_creature_attributeDataTable^  table_creature_attribute;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _creature_attributeRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property System::Int32 creature_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ironfist::NewDataSet::creatureRow^  creatureRow {
                ironfist::NewDataSet::creatureRow^  get();
                System::Void set(ironfist::NewDataSet::creatureRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Boolean Iscreature_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            ::System::Void Setcreature_IdNull();
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class creaturesRowChangeEvent : public ::System::EventArgs {
            
            private: ironfist::NewDataSet::creaturesRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            creaturesRowChangeEvent(ironfist::NewDataSet::creaturesRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ironfist::NewDataSet::creaturesRow^  Row {
                ironfist::NewDataSet::creaturesRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class creatureRowChangeEvent : public ::System::EventArgs {
            
            private: ironfist::NewDataSet::creatureRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            creatureRowChangeEvent(ironfist::NewDataSet::creatureRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ironfist::NewDataSet::creatureRow^  Row {
                ironfist::NewDataSet::creatureRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class damageRowChangeEvent : public ::System::EventArgs {
            
            private: ironfist::NewDataSet::damageRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            damageRowChangeEvent(ironfist::NewDataSet::damageRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ironfist::NewDataSet::damageRow^  Row {
                ironfist::NewDataSet::damageRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class _random_spawnRowChangeEvent : public ::System::EventArgs {
            
            private: ironfist::NewDataSet::_random_spawnRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _random_spawnRowChangeEvent(ironfist::NewDataSet::_random_spawnRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ironfist::NewDataSet::_random_spawnRow^  Row {
                ironfist::NewDataSet::_random_spawnRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        public : /// <summary>
///Row event argument class
///</summary>
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ref class _creature_attributeRowChangeEvent : public ::System::EventArgs {
            
            private: ironfist::NewDataSet::_creature_attributeRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            _creature_attributeRowChangeEvent(ironfist::NewDataSet::_creature_attributeRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ironfist::NewDataSet::_creature_attributeRow^  Row {
                ironfist::NewDataSet::_creature_attributeRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace ironfist {
    
    
    inline NewDataSet::NewDataSet() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &ironfist::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &ironfist::NewDataSet::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"creatures"] != nullptr) {
                __super::Tables->Add((gcnew ironfist::NewDataSet::creaturesDataTable(ds->Tables[L"creatures"])));
            }
            if (ds->Tables[L"creature"] != nullptr) {
                __super::Tables->Add((gcnew ironfist::NewDataSet::creatureDataTable(ds->Tables[L"creature"])));
            }
            if (ds->Tables[L"damage"] != nullptr) {
                __super::Tables->Add((gcnew ironfist::NewDataSet::damageDataTable(ds->Tables[L"damage"])));
            }
            if (ds->Tables[L"random-spawn"] != nullptr) {
                __super::Tables->Add((gcnew ironfist::NewDataSet::_random_spawnDataTable(ds->Tables[L"random-spawn"])));
            }
            if (ds->Tables[L"creature-attribute"] != nullptr) {
                __super::Tables->Add((gcnew ironfist::NewDataSet::_creature_attributeDataTable(ds->Tables[L"creature-attribute"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &ironfist::NewDataSet::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline ironfist::NewDataSet::creaturesDataTable^  NewDataSet::creatures::get() {
        return this->tablecreatures;
    }
    
    inline ironfist::NewDataSet::creatureDataTable^  NewDataSet::creature::get() {
        return this->tablecreature;
    }
    
    inline ironfist::NewDataSet::damageDataTable^  NewDataSet::damage::get() {
        return this->tabledamage;
    }
    
    inline ironfist::NewDataSet::_random_spawnDataTable^  NewDataSet::_random_spawn::get() {
        return this->table_random_spawn;
    }
    
    inline ironfist::NewDataSet::_creature_attributeDataTable^  NewDataSet::_creature_attribute::get() {
        return this->table_creature_attribute;
    }
    
    inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  NewDataSet::Clone() {
        ironfist::NewDataSet^  cln = (cli::safe_cast<ironfist::NewDataSet^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"creatures"] != nullptr) {
                __super::Tables->Add((gcnew ironfist::NewDataSet::creaturesDataTable(ds->Tables[L"creatures"])));
            }
            if (ds->Tables[L"creature"] != nullptr) {
                __super::Tables->Add((gcnew ironfist::NewDataSet::creatureDataTable(ds->Tables[L"creature"])));
            }
            if (ds->Tables[L"damage"] != nullptr) {
                __super::Tables->Add((gcnew ironfist::NewDataSet::damageDataTable(ds->Tables[L"damage"])));
            }
            if (ds->Tables[L"random-spawn"] != nullptr) {
                __super::Tables->Add((gcnew ironfist::NewDataSet::_random_spawnDataTable(ds->Tables[L"random-spawn"])));
            }
            if (ds->Tables[L"creature-attribute"] != nullptr) {
                __super::Tables->Add((gcnew ironfist::NewDataSet::_creature_attributeDataTable(ds->Tables[L"creature-attribute"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void NewDataSet::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
        this->tablecreatures = (cli::safe_cast<ironfist::NewDataSet::creaturesDataTable^  >(__super::Tables[L"creatures"]));
        if (initTable == true) {
            if (this->tablecreatures != nullptr) {
                this->tablecreatures->InitVars();
            }
        }
        this->tablecreature = (cli::safe_cast<ironfist::NewDataSet::creatureDataTable^  >(__super::Tables[L"creature"]));
        if (initTable == true) {
            if (this->tablecreature != nullptr) {
                this->tablecreature->InitVars();
            }
        }
        this->tabledamage = (cli::safe_cast<ironfist::NewDataSet::damageDataTable^  >(__super::Tables[L"damage"]));
        if (initTable == true) {
            if (this->tabledamage != nullptr) {
                this->tabledamage->InitVars();
            }
        }
        this->table_random_spawn = (cli::safe_cast<ironfist::NewDataSet::_random_spawnDataTable^  >(__super::Tables[L"random-spawn"]));
        if (initTable == true) {
            if (this->table_random_spawn != nullptr) {
                this->table_random_spawn->InitVars();
            }
        }
        this->table_creature_attribute = (cli::safe_cast<ironfist::NewDataSet::_creature_attributeDataTable^  >(__super::Tables[L"creature-attribute"]));
        if (initTable == true) {
            if (this->table_creature_attribute != nullptr) {
                this->table_creature_attribute->InitVars();
            }
        }
        this->relationcreatures_creature = this->Relations[L"creatures_creature"];
        this->relationcreature_damage = this->Relations[L"creature_damage"];
        this->_relationcreature_random_spawn = this->Relations[L"creature_random-spawn"];
        this->_relationcreature_creature_attribute = this->Relations[L"creature_creature-attribute"];
    }
    
    inline ::System::Void NewDataSet::InitClass() {
        this->DataSetName = L"NewDataSet";
        this->Prefix = L"";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tablecreatures = (gcnew ironfist::NewDataSet::creaturesDataTable());
        __super::Tables->Add(this->tablecreatures);
        this->tablecreature = (gcnew ironfist::NewDataSet::creatureDataTable());
        __super::Tables->Add(this->tablecreature);
        this->tabledamage = (gcnew ironfist::NewDataSet::damageDataTable());
        __super::Tables->Add(this->tabledamage);
        this->table_random_spawn = (gcnew ironfist::NewDataSet::_random_spawnDataTable());
        __super::Tables->Add(this->table_random_spawn);
        this->table_creature_attribute = (gcnew ironfist::NewDataSet::_creature_attributeDataTable());
        __super::Tables->Add(this->table_creature_attribute);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"creatures_creature", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecreatures->creatures_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecreature->creatures_IdColumn}));
        this->tablecreature->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"creature_damage", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecreature->creature_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledamage->creature_IdColumn}));
        this->tabledamage->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"creature_random-spawn", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecreature->creature_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_random_spawn->creature_IdColumn}));
        this->table_random_spawn->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"creature_creature-attribute", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecreature->creature_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_creature_attribute->creature_IdColumn}));
        this->table_creature_attribute->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationcreatures_creature = (gcnew ::System::Data::DataRelation(L"creatures_creature", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecreatures->creatures_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecreature->creatures_IdColumn}, false));
        this->relationcreatures_creature->Nested = true;
        this->Relations->Add(this->relationcreatures_creature);
        this->relationcreature_damage = (gcnew ::System::Data::DataRelation(L"creature_damage", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecreature->creature_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tabledamage->creature_IdColumn}, false));
        this->relationcreature_damage->Nested = true;
        this->Relations->Add(this->relationcreature_damage);
        this->_relationcreature_random_spawn = (gcnew ::System::Data::DataRelation(L"creature_random-spawn", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecreature->creature_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_random_spawn->creature_IdColumn}, false));
        this->_relationcreature_random_spawn->Nested = true;
        this->Relations->Add(this->_relationcreature_random_spawn);
        this->_relationcreature_creature_attribute = (gcnew ::System::Data::DataRelation(L"creature_creature-attribute", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablecreature->creature_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->table_creature_attribute->creature_IdColumn}, false));
        this->_relationcreature_creature_attribute->Nested = true;
        this->Relations->Add(this->_relationcreature_creature_attribute);
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializecreatures() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializecreature() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerializedamage() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerialize_random_spawn() {
        return false;
    }
    
    inline ::System::Boolean NewDataSet::ShouldSerialize_creature_attribute() {
        return false;
    }
    
    inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ironfist::NewDataSet^  ds = (gcnew ironfist::NewDataSet());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::creaturesDataTable::creaturesDataTable() {
        this->TableName = L"creatures";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::creaturesDataTable::creaturesDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::creaturesDataTable::creaturesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creaturesDataTable::creatures_IdColumn::get() {
        return this->columncreatures_Id;
    }
    
    inline ::System::Int32 NewDataSet::creaturesDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ironfist::NewDataSet::creaturesRow^  NewDataSet::creaturesDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<ironfist::NewDataSet::creaturesRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::creaturesDataTable::AddcreaturesRow(ironfist::NewDataSet::creaturesRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ironfist::NewDataSet::creaturesRow^  NewDataSet::creaturesDataTable::AddcreaturesRow() {
        ironfist::NewDataSet::creaturesRow^  rowcreaturesRow = (cli::safe_cast<ironfist::NewDataSet::creaturesRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(1) {nullptr};
        rowcreaturesRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowcreaturesRow);
        return rowcreaturesRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::creaturesDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::creaturesDataTable::Clone() {
        ironfist::NewDataSet::creaturesDataTable^  cln = (cli::safe_cast<ironfist::NewDataSet::creaturesDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::creaturesDataTable::CreateInstance() {
        return (gcnew ironfist::NewDataSet::creaturesDataTable());
    }
    
    inline ::System::Void NewDataSet::creaturesDataTable::InitVars() {
        this->columncreatures_Id = __super::Columns[L"creatures_Id"];
    }
    
    inline ::System::Void NewDataSet::creaturesDataTable::InitClass() {
        this->columncreatures_Id = (gcnew ::System::Data::DataColumn(L"creatures_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncreatures_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columncreatures_Id}, 
                true)));
        this->columncreatures_Id->AutoIncrement = true;
        this->columncreatures_Id->AllowDBNull = false;
        this->columncreatures_Id->Unique = true;
    }
    
    inline ironfist::NewDataSet::creaturesRow^  NewDataSet::creaturesDataTable::NewcreaturesRow() {
        return (cli::safe_cast<ironfist::NewDataSet::creaturesRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::creaturesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew ironfist::NewDataSet::creaturesRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::creaturesDataTable::GetRowType() {
        return ironfist::NewDataSet::creaturesRow::typeid;
    }
    
    inline ::System::Void NewDataSet::creaturesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->creaturesRowChanged(this, (gcnew ironfist::NewDataSet::creaturesRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::creaturesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::creaturesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->creaturesRowChanging(this, (gcnew ironfist::NewDataSet::creaturesRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::creaturesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::creaturesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->creaturesRowDeleted(this, (gcnew ironfist::NewDataSet::creaturesRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::creaturesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::creaturesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->creaturesRowDeleting(this, (gcnew ironfist::NewDataSet::creaturesRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::creaturesRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::creaturesDataTable::RemovecreaturesRow(ironfist::NewDataSet::creaturesRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::creaturesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ironfist::NewDataSet^  ds = (gcnew ironfist::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"creaturesDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::creatureDataTable::creatureDataTable() {
        this->TableName = L"creature";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::creatureDataTable::creatureDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::creatureDataTable::creatureDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::idColumn::get() {
        return this->columnid;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::_name_singularColumn::get() {
        return this->column_name_singular;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::_name_pluralColumn::get() {
        return this->column_name_plural;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::icnColumn::get() {
        return this->columnicn;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::frmColumn::get() {
        return this->columnfrm;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::costColumn::get() {
        return this->columncost;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::_fight_valueColumn::get() {
        return this->column_fight_value;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::_fight_value_auxColumn::get() {
        return this->column_fight_value_aux;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::growthColumn::get() {
        return this->columngrowth;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::hpColumn::get() {
        return this->columnhp;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::factionColumn::get() {
        return this->columnfaction;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::speedColumn::get() {
        return this->columnspeed;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::attackColumn::get() {
        return this->columnattack;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::defenseColumn::get() {
        return this->columndefense;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::shotsColumn::get() {
        return this->columnshots;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::_short_nameColumn::get() {
        return this->column_short_name;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::creature_IdColumn::get() {
        return this->columncreature_Id;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::creatureDataTable::creatures_IdColumn::get() {
        return this->columncreatures_Id;
    }
    
    inline ::System::Int32 NewDataSet::creatureDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ironfist::NewDataSet::creatureRow^  NewDataSet::creatureDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<ironfist::NewDataSet::creatureRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::creatureDataTable::AddcreatureRow(ironfist::NewDataSet::creatureRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ironfist::NewDataSet::creatureRow^  NewDataSet::creatureDataTable::AddcreatureRow(
                System::Int32 id, 
                System::String^  _name_singular, 
                System::String^  _name_plural, 
                System::String^  icn, 
                System::String^  frm, 
                System::Int32 cost, 
                System::Int32 _fight_value, 
                System::Int32 _fight_value_aux, 
                System::Int32 growth, 
                System::Int32 hp, 
                System::Int32 faction, 
                System::Int32 speed, 
                System::Int32 attack, 
                System::Int32 defense, 
                System::Int32 shots, 
                System::String^  _short_name, 
                ironfist::NewDataSet::creaturesRow^  parentcreaturesRowBycreatures_creature) {
        ironfist::NewDataSet::creatureRow^  rowcreatureRow = (cli::safe_cast<ironfist::NewDataSet::creatureRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(18) {id, _name_singular, 
            _name_plural, icn, frm, cost, _fight_value, _fight_value_aux, growth, hp, faction, speed, attack, defense, shots, _short_name, 
            nullptr, nullptr};
        if (parentcreaturesRowBycreatures_creature != nullptr) {
            columnValuesArray[17] = parentcreaturesRowBycreatures_creature[0];
        }
        rowcreatureRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowcreatureRow);
        return rowcreatureRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::creatureDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::creatureDataTable::Clone() {
        ironfist::NewDataSet::creatureDataTable^  cln = (cli::safe_cast<ironfist::NewDataSet::creatureDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::creatureDataTable::CreateInstance() {
        return (gcnew ironfist::NewDataSet::creatureDataTable());
    }
    
    inline ::System::Void NewDataSet::creatureDataTable::InitVars() {
        this->columnid = __super::Columns[L"id"];
        this->column_name_singular = __super::Columns[L"name-singular"];
        this->column_name_plural = __super::Columns[L"name-plural"];
        this->columnicn = __super::Columns[L"icn"];
        this->columnfrm = __super::Columns[L"frm"];
        this->columncost = __super::Columns[L"cost"];
        this->column_fight_value = __super::Columns[L"fight-value"];
        this->column_fight_value_aux = __super::Columns[L"fight-value-aux"];
        this->columngrowth = __super::Columns[L"growth"];
        this->columnhp = __super::Columns[L"hp"];
        this->columnfaction = __super::Columns[L"faction"];
        this->columnspeed = __super::Columns[L"speed"];
        this->columnattack = __super::Columns[L"attack"];
        this->columndefense = __super::Columns[L"defense"];
        this->columnshots = __super::Columns[L"shots"];
        this->column_short_name = __super::Columns[L"short-name"];
        this->columncreature_Id = __super::Columns[L"creature_Id"];
        this->columncreatures_Id = __super::Columns[L"creatures_Id"];
    }
    
    inline ::System::Void NewDataSet::creatureDataTable::InitClass() {
        this->columnid = (gcnew ::System::Data::DataColumn(L"id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnid);
        this->column_name_singular = (gcnew ::System::Data::DataColumn(L"name-singular", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->column_name_singular);
        this->column_name_plural = (gcnew ::System::Data::DataColumn(L"name-plural", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->column_name_plural);
        this->columnicn = (gcnew ::System::Data::DataColumn(L"icn", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnicn);
        this->columnfrm = (gcnew ::System::Data::DataColumn(L"frm", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfrm);
        this->columncost = (gcnew ::System::Data::DataColumn(L"cost", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columncost);
        this->column_fight_value = (gcnew ::System::Data::DataColumn(L"fight-value", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->column_fight_value);
        this->column_fight_value_aux = (gcnew ::System::Data::DataColumn(L"fight-value-aux", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->column_fight_value_aux);
        this->columngrowth = (gcnew ::System::Data::DataColumn(L"growth", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columngrowth);
        this->columnhp = (gcnew ::System::Data::DataColumn(L"hp", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnhp);
        this->columnfaction = (gcnew ::System::Data::DataColumn(L"faction", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnfaction);
        this->columnspeed = (gcnew ::System::Data::DataColumn(L"speed", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnspeed);
        this->columnattack = (gcnew ::System::Data::DataColumn(L"attack", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnattack);
        this->columndefense = (gcnew ::System::Data::DataColumn(L"defense", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columndefense);
        this->columnshots = (gcnew ::System::Data::DataColumn(L"shots", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnshots);
        this->column_short_name = (gcnew ::System::Data::DataColumn(L"short-name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->column_short_name);
        this->columncreature_Id = (gcnew ::System::Data::DataColumn(L"creature_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncreature_Id);
        this->columncreatures_Id = (gcnew ::System::Data::DataColumn(L"creatures_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncreatures_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columncreature_Id}, 
                true)));
        this->columnid->AllowDBNull = false;
        this->columnid->Namespace = L"";
        this->column_name_singular->AllowDBNull = false;
        this->column_name_singular->Namespace = L"";
        this->column_name_plural->AllowDBNull = false;
        this->column_name_plural->Namespace = L"";
        this->columnicn->AllowDBNull = false;
        this->columnicn->Namespace = L"";
        this->columnfrm->AllowDBNull = false;
        this->columnfrm->Namespace = L"";
        this->columncost->AllowDBNull = false;
        this->columncost->Namespace = L"";
        this->column_fight_value->AllowDBNull = false;
        this->column_fight_value->Namespace = L"";
        this->column_fight_value_aux->AllowDBNull = false;
        this->column_fight_value_aux->Namespace = L"";
        this->columngrowth->AllowDBNull = false;
        this->columngrowth->Namespace = L"";
        this->columnhp->AllowDBNull = false;
        this->columnhp->Namespace = L"";
        this->columnfaction->AllowDBNull = false;
        this->columnfaction->Namespace = L"";
        this->columnspeed->AllowDBNull = false;
        this->columnspeed->Namespace = L"";
        this->columnattack->AllowDBNull = false;
        this->columnattack->Namespace = L"";
        this->columndefense->AllowDBNull = false;
        this->columndefense->Namespace = L"";
        this->columnshots->AllowDBNull = false;
        this->columnshots->Namespace = L"";
        this->column_short_name->AllowDBNull = false;
        this->column_short_name->Namespace = L"";
        this->columncreature_Id->AutoIncrement = true;
        this->columncreature_Id->AllowDBNull = false;
        this->columncreature_Id->Unique = true;
    }
    
    inline ironfist::NewDataSet::creatureRow^  NewDataSet::creatureDataTable::NewcreatureRow() {
        return (cli::safe_cast<ironfist::NewDataSet::creatureRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::creatureDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew ironfist::NewDataSet::creatureRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::creatureDataTable::GetRowType() {
        return ironfist::NewDataSet::creatureRow::typeid;
    }
    
    inline ::System::Void NewDataSet::creatureDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->creatureRowChanged(this, (gcnew ironfist::NewDataSet::creatureRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::creatureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::creatureDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->creatureRowChanging(this, (gcnew ironfist::NewDataSet::creatureRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::creatureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::creatureDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->creatureRowDeleted(this, (gcnew ironfist::NewDataSet::creatureRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::creatureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::creatureDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->creatureRowDeleting(this, (gcnew ironfist::NewDataSet::creatureRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::creatureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::creatureDataTable::RemovecreatureRow(ironfist::NewDataSet::creatureRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::creatureDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ironfist::NewDataSet^  ds = (gcnew ironfist::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"creatureDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::damageDataTable::damageDataTable() {
        this->TableName = L"damage";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::damageDataTable::damageDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::damageDataTable::damageDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::damageDataTable::minimumColumn::get() {
        return this->columnminimum;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::damageDataTable::maximumColumn::get() {
        return this->columnmaximum;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::damageDataTable::creature_IdColumn::get() {
        return this->columncreature_Id;
    }
    
    inline ::System::Int32 NewDataSet::damageDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ironfist::NewDataSet::damageRow^  NewDataSet::damageDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<ironfist::NewDataSet::damageRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::damageDataTable::AdddamageRow(ironfist::NewDataSet::damageRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ironfist::NewDataSet::damageRow^  NewDataSet::damageDataTable::AdddamageRow(System::Int32 minimum, System::Int32 maximum, 
                ironfist::NewDataSet::creatureRow^  parentcreatureRowBycreature_damage) {
        ironfist::NewDataSet::damageRow^  rowdamageRow = (cli::safe_cast<ironfist::NewDataSet::damageRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {minimum, maximum, nullptr};
        if (parentcreatureRowBycreature_damage != nullptr) {
            columnValuesArray[2] = parentcreatureRowBycreature_damage[16];
        }
        rowdamageRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowdamageRow);
        return rowdamageRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::damageDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::damageDataTable::Clone() {
        ironfist::NewDataSet::damageDataTable^  cln = (cli::safe_cast<ironfist::NewDataSet::damageDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::damageDataTable::CreateInstance() {
        return (gcnew ironfist::NewDataSet::damageDataTable());
    }
    
    inline ::System::Void NewDataSet::damageDataTable::InitVars() {
        this->columnminimum = __super::Columns[L"minimum"];
        this->columnmaximum = __super::Columns[L"maximum"];
        this->columncreature_Id = __super::Columns[L"creature_Id"];
    }
    
    inline ::System::Void NewDataSet::damageDataTable::InitClass() {
        this->columnminimum = (gcnew ::System::Data::DataColumn(L"minimum", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnminimum);
        this->columnmaximum = (gcnew ::System::Data::DataColumn(L"maximum", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmaximum);
        this->columncreature_Id = (gcnew ::System::Data::DataColumn(L"creature_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncreature_Id);
        this->columnminimum->AllowDBNull = false;
        this->columnminimum->Namespace = L"";
        this->columnmaximum->AllowDBNull = false;
        this->columnmaximum->Namespace = L"";
    }
    
    inline ironfist::NewDataSet::damageRow^  NewDataSet::damageDataTable::NewdamageRow() {
        return (cli::safe_cast<ironfist::NewDataSet::damageRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::damageDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew ironfist::NewDataSet::damageRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::damageDataTable::GetRowType() {
        return ironfist::NewDataSet::damageRow::typeid;
    }
    
    inline ::System::Void NewDataSet::damageDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->damageRowChanged(this, (gcnew ironfist::NewDataSet::damageRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::damageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::damageDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->damageRowChanging(this, (gcnew ironfist::NewDataSet::damageRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::damageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::damageDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->damageRowDeleted(this, (gcnew ironfist::NewDataSet::damageRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::damageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::damageDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->damageRowDeleting(this, (gcnew ironfist::NewDataSet::damageRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::damageRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::damageDataTable::RemovedamageRow(ironfist::NewDataSet::damageRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::damageDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ironfist::NewDataSet^  ds = (gcnew ironfist::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"damageDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::_random_spawnDataTable::_random_spawnDataTable() {
        this->TableName = L"random-spawn";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::_random_spawnDataTable::_random_spawnDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::_random_spawnDataTable::_random_spawnDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_random_spawnDataTable::minimumColumn::get() {
        return this->columnminimum;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_random_spawnDataTable::maximumColumn::get() {
        return this->columnmaximum;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_random_spawnDataTable::creature_IdColumn::get() {
        return this->columncreature_Id;
    }
    
    inline ::System::Int32 NewDataSet::_random_spawnDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ironfist::NewDataSet::_random_spawnRow^  NewDataSet::_random_spawnDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<ironfist::NewDataSet::_random_spawnRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::_random_spawnDataTable::Add_random_spawnRow(ironfist::NewDataSet::_random_spawnRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ironfist::NewDataSet::_random_spawnRow^  NewDataSet::_random_spawnDataTable::Add_random_spawnRow(System::Int32 minimum, 
                System::Int32 maximum, ironfist::NewDataSet::creatureRow^  _parentcreatureRowBycreature_random_spawn) {
        ironfist::NewDataSet::_random_spawnRow^  row_random_spawnRow = (cli::safe_cast<ironfist::NewDataSet::_random_spawnRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {minimum, maximum, nullptr};
        if (_parentcreatureRowBycreature_random_spawn != nullptr) {
            columnValuesArray[2] = _parentcreatureRowBycreature_random_spawn[16];
        }
        row_random_spawnRow->ItemArray = columnValuesArray;
        this->Rows->Add(row_random_spawnRow);
        return row_random_spawnRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::_random_spawnDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_random_spawnDataTable::Clone() {
        ironfist::NewDataSet::_random_spawnDataTable^  cln = (cli::safe_cast<ironfist::NewDataSet::_random_spawnDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_random_spawnDataTable::CreateInstance() {
        return (gcnew ironfist::NewDataSet::_random_spawnDataTable());
    }
    
    inline ::System::Void NewDataSet::_random_spawnDataTable::InitVars() {
        this->columnminimum = __super::Columns[L"minimum"];
        this->columnmaximum = __super::Columns[L"maximum"];
        this->columncreature_Id = __super::Columns[L"creature_Id"];
    }
    
    inline ::System::Void NewDataSet::_random_spawnDataTable::InitClass() {
        this->columnminimum = (gcnew ::System::Data::DataColumn(L"minimum", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnminimum);
        this->columnmaximum = (gcnew ::System::Data::DataColumn(L"maximum", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnmaximum);
        this->columncreature_Id = (gcnew ::System::Data::DataColumn(L"creature_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncreature_Id);
        this->columnminimum->AllowDBNull = false;
        this->columnminimum->Namespace = L"";
        this->columnmaximum->AllowDBNull = false;
        this->columnmaximum->Namespace = L"";
    }
    
    inline ironfist::NewDataSet::_random_spawnRow^  NewDataSet::_random_spawnDataTable::New_random_spawnRow() {
        return (cli::safe_cast<ironfist::NewDataSet::_random_spawnRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::_random_spawnDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew ironfist::NewDataSet::_random_spawnRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::_random_spawnDataTable::GetRowType() {
        return ironfist::NewDataSet::_random_spawnRow::typeid;
    }
    
    inline ::System::Void NewDataSet::_random_spawnDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->_random_spawnRowChanged(this, (gcnew ironfist::NewDataSet::_random_spawnRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::_random_spawnRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_random_spawnDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->_random_spawnRowChanging(this, (gcnew ironfist::NewDataSet::_random_spawnRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::_random_spawnRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_random_spawnDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->_random_spawnRowDeleted(this, (gcnew ironfist::NewDataSet::_random_spawnRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::_random_spawnRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_random_spawnDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->_random_spawnRowDeleting(this, (gcnew ironfist::NewDataSet::_random_spawnRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::_random_spawnRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_random_spawnDataTable::Remove_random_spawnRow(ironfist::NewDataSet::_random_spawnRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_random_spawnDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ironfist::NewDataSet^  ds = (gcnew ironfist::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"_random_spawnDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::_creature_attributeDataTable::_creature_attributeDataTable() {
        this->TableName = L"creature-attribute";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline NewDataSet::_creature_attributeDataTable::_creature_attributeDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline NewDataSet::_creature_attributeDataTable::_creature_attributeDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_creature_attributeDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  NewDataSet::_creature_attributeDataTable::creature_IdColumn::get() {
        return this->columncreature_Id;
    }
    
    inline ::System::Int32 NewDataSet::_creature_attributeDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline ironfist::NewDataSet::_creature_attributeRow^  NewDataSet::_creature_attributeDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<ironfist::NewDataSet::_creature_attributeRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void NewDataSet::_creature_attributeDataTable::Add_creature_attributeRow(ironfist::NewDataSet::_creature_attributeRow^  row) {
        this->Rows->Add(row);
    }
    
    inline ironfist::NewDataSet::_creature_attributeRow^  NewDataSet::_creature_attributeDataTable::Add_creature_attributeRow(
                System::String^  name, ironfist::NewDataSet::creatureRow^  _parentcreatureRowBycreature_creature_attribute) {
        ironfist::NewDataSet::_creature_attributeRow^  row_creature_attributeRow = (cli::safe_cast<ironfist::NewDataSet::_creature_attributeRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {name, nullptr};
        if (_parentcreatureRowBycreature_creature_attribute != nullptr) {
            columnValuesArray[1] = _parentcreatureRowBycreature_creature_attribute[16];
        }
        row_creature_attributeRow->ItemArray = columnValuesArray;
        this->Rows->Add(row_creature_attributeRow);
        return row_creature_attributeRow;
    }
    
    inline ::System::Collections::IEnumerator^  NewDataSet::_creature_attributeDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_creature_attributeDataTable::Clone() {
        ironfist::NewDataSet::_creature_attributeDataTable^  cln = (cli::safe_cast<ironfist::NewDataSet::_creature_attributeDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  NewDataSet::_creature_attributeDataTable::CreateInstance() {
        return (gcnew ironfist::NewDataSet::_creature_attributeDataTable());
    }
    
    inline ::System::Void NewDataSet::_creature_attributeDataTable::InitVars() {
        this->columnname = __super::Columns[L"name"];
        this->columncreature_Id = __super::Columns[L"creature_Id"];
    }
    
    inline ::System::Void NewDataSet::_creature_attributeDataTable::InitClass() {
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnname);
        this->columncreature_Id = (gcnew ::System::Data::DataColumn(L"creature_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columncreature_Id);
        this->columnname->AllowDBNull = false;
        this->columnname->Namespace = L"";
    }
    
    inline ironfist::NewDataSet::_creature_attributeRow^  NewDataSet::_creature_attributeDataTable::New_creature_attributeRow() {
        return (cli::safe_cast<ironfist::NewDataSet::_creature_attributeRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  NewDataSet::_creature_attributeDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew ironfist::NewDataSet::_creature_attributeRow(builder));
    }
    
    inline ::System::Type^  NewDataSet::_creature_attributeDataTable::GetRowType() {
        return ironfist::NewDataSet::_creature_attributeRow::typeid;
    }
    
    inline ::System::Void NewDataSet::_creature_attributeDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->_creature_attributeRowChanged(this, (gcnew ironfist::NewDataSet::_creature_attributeRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::_creature_attributeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_creature_attributeDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->_creature_attributeRowChanging(this, (gcnew ironfist::NewDataSet::_creature_attributeRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::_creature_attributeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_creature_attributeDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->_creature_attributeRowDeleted(this, (gcnew ironfist::NewDataSet::_creature_attributeRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::_creature_attributeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_creature_attributeDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->_creature_attributeRowDeleting(this, (gcnew ironfist::NewDataSet::_creature_attributeRowChangeEvent((cli::safe_cast<ironfist::NewDataSet::_creature_attributeRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void NewDataSet::_creature_attributeDataTable::Remove_creature_attributeRow(ironfist::NewDataSet::_creature_attributeRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::_creature_attributeDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ironfist::NewDataSet^  ds = (gcnew ironfist::NewDataSet());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"_creature_attributeDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline NewDataSet::creaturesRow::creaturesRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablecreatures = (cli::safe_cast<ironfist::NewDataSet::creaturesDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::creaturesRow::creatures_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecreatures->creatures_IdColumn]));
    }
    inline System::Void NewDataSet::creaturesRow::creatures_Id::set(System::Int32 value) {
        this[this->tablecreatures->creatures_IdColumn] = value;
    }
    
    inline cli::array< ironfist::NewDataSet::creatureRow^  >^  NewDataSet::creaturesRow::GetcreatureRows() {
        if (this->Table->ChildRelations[L"creatures_creature"] == nullptr) {
            return gcnew cli::array< ironfist::NewDataSet::creatureRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< ironfist::NewDataSet::creatureRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"creatures_creature"])));
        }
    }
    
    
    inline NewDataSet::creatureRow::creatureRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablecreature = (cli::safe_cast<ironfist::NewDataSet::creatureDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::creatureRow::id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecreature->idColumn]));
    }
    inline System::Void NewDataSet::creatureRow::id::set(System::Int32 value) {
        this[this->tablecreature->idColumn] = value;
    }
    
    inline System::String^  NewDataSet::creatureRow::_name_singular::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablecreature->_name_singularColumn]));
    }
    inline System::Void NewDataSet::creatureRow::_name_singular::set(System::String^  value) {
        this[this->tablecreature->_name_singularColumn] = value;
    }
    
    inline System::String^  NewDataSet::creatureRow::_name_plural::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablecreature->_name_pluralColumn]));
    }
    inline System::Void NewDataSet::creatureRow::_name_plural::set(System::String^  value) {
        this[this->tablecreature->_name_pluralColumn] = value;
    }
    
    inline System::String^  NewDataSet::creatureRow::icn::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablecreature->icnColumn]));
    }
    inline System::Void NewDataSet::creatureRow::icn::set(System::String^  value) {
        this[this->tablecreature->icnColumn] = value;
    }
    
    inline System::String^  NewDataSet::creatureRow::frm::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablecreature->frmColumn]));
    }
    inline System::Void NewDataSet::creatureRow::frm::set(System::String^  value) {
        this[this->tablecreature->frmColumn] = value;
    }
    
    inline System::Int32 NewDataSet::creatureRow::cost::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecreature->costColumn]));
    }
    inline System::Void NewDataSet::creatureRow::cost::set(System::Int32 value) {
        this[this->tablecreature->costColumn] = value;
    }
    
    inline System::Int32 NewDataSet::creatureRow::_fight_value::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecreature->_fight_valueColumn]));
    }
    inline System::Void NewDataSet::creatureRow::_fight_value::set(System::Int32 value) {
        this[this->tablecreature->_fight_valueColumn] = value;
    }
    
    inline System::Int32 NewDataSet::creatureRow::_fight_value_aux::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecreature->_fight_value_auxColumn]));
    }
    inline System::Void NewDataSet::creatureRow::_fight_value_aux::set(System::Int32 value) {
        this[this->tablecreature->_fight_value_auxColumn] = value;
    }
    
    inline System::Int32 NewDataSet::creatureRow::growth::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecreature->growthColumn]));
    }
    inline System::Void NewDataSet::creatureRow::growth::set(System::Int32 value) {
        this[this->tablecreature->growthColumn] = value;
    }
    
    inline System::Int32 NewDataSet::creatureRow::hp::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecreature->hpColumn]));
    }
    inline System::Void NewDataSet::creatureRow::hp::set(System::Int32 value) {
        this[this->tablecreature->hpColumn] = value;
    }
    
    inline System::Int32 NewDataSet::creatureRow::faction::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecreature->factionColumn]));
    }
    inline System::Void NewDataSet::creatureRow::faction::set(System::Int32 value) {
        this[this->tablecreature->factionColumn] = value;
    }
    
    inline System::Int32 NewDataSet::creatureRow::speed::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecreature->speedColumn]));
    }
    inline System::Void NewDataSet::creatureRow::speed::set(System::Int32 value) {
        this[this->tablecreature->speedColumn] = value;
    }
    
    inline System::Int32 NewDataSet::creatureRow::attack::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecreature->attackColumn]));
    }
    inline System::Void NewDataSet::creatureRow::attack::set(System::Int32 value) {
        this[this->tablecreature->attackColumn] = value;
    }
    
    inline System::Int32 NewDataSet::creatureRow::defense::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecreature->defenseColumn]));
    }
    inline System::Void NewDataSet::creatureRow::defense::set(System::Int32 value) {
        this[this->tablecreature->defenseColumn] = value;
    }
    
    inline System::Int32 NewDataSet::creatureRow::shots::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecreature->shotsColumn]));
    }
    inline System::Void NewDataSet::creatureRow::shots::set(System::Int32 value) {
        this[this->tablecreature->shotsColumn] = value;
    }
    
    inline System::String^  NewDataSet::creatureRow::_short_name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablecreature->_short_nameColumn]));
    }
    inline System::Void NewDataSet::creatureRow::_short_name::set(System::String^  value) {
        this[this->tablecreature->_short_nameColumn] = value;
    }
    
    inline System::Int32 NewDataSet::creatureRow::creature_Id::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tablecreature->creature_IdColumn]));
    }
    inline System::Void NewDataSet::creatureRow::creature_Id::set(System::Int32 value) {
        this[this->tablecreature->creature_IdColumn] = value;
    }
    
    inline System::Int32 NewDataSet::creatureRow::creatures_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tablecreature->creatures_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'creatures_Id\' in table \'creature\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::creatureRow::creatures_Id::set(System::Int32 value) {
        this[this->tablecreature->creatures_IdColumn] = value;
    }
    
    inline ironfist::NewDataSet::creaturesRow^  NewDataSet::creatureRow::creaturesRow::get() {
        return (cli::safe_cast<ironfist::NewDataSet::creaturesRow^  >(this->GetParentRow(this->Table->ParentRelations[L"creatures_creature"])));
    }
    inline System::Void NewDataSet::creatureRow::creaturesRow::set(ironfist::NewDataSet::creaturesRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"creatures_creature"]);
    }
    
    inline ::System::Boolean NewDataSet::creatureRow::Iscreatures_IdNull() {
        return this->IsNull(this->tablecreature->creatures_IdColumn);
    }
    
    inline ::System::Void NewDataSet::creatureRow::Setcreatures_IdNull() {
        this[this->tablecreature->creatures_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< ironfist::NewDataSet::damageRow^  >^  NewDataSet::creatureRow::GetdamageRows() {
        if (this->Table->ChildRelations[L"creature_damage"] == nullptr) {
            return gcnew cli::array< ironfist::NewDataSet::damageRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< ironfist::NewDataSet::damageRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"creature_damage"])));
        }
    }
    
    inline cli::array< ironfist::NewDataSet::_random_spawnRow^  >^  NewDataSet::creatureRow::_Getrandom_spawnRows() {
        if (this->Table->ChildRelations[L"creature_random-spawn"] == nullptr) {
            return gcnew cli::array< ironfist::NewDataSet::_random_spawnRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< ironfist::NewDataSet::_random_spawnRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"creature_random-spawn"])));
        }
    }
    
    inline cli::array< ironfist::NewDataSet::_creature_attributeRow^  >^  NewDataSet::creatureRow::_Getcreature_attributeRows() {
        if (this->Table->ChildRelations[L"creature_creature-attribute"] == nullptr) {
            return gcnew cli::array< ironfist::NewDataSet::_creature_attributeRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< ironfist::NewDataSet::_creature_attributeRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"creature_creature-attribute"])));
        }
    }
    
    
    inline NewDataSet::damageRow::damageRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tabledamage = (cli::safe_cast<ironfist::NewDataSet::damageDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::damageRow::minimum::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tabledamage->minimumColumn]));
    }
    inline System::Void NewDataSet::damageRow::minimum::set(System::Int32 value) {
        this[this->tabledamage->minimumColumn] = value;
    }
    
    inline System::Int32 NewDataSet::damageRow::maximum::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->tabledamage->maximumColumn]));
    }
    inline System::Void NewDataSet::damageRow::maximum::set(System::Int32 value) {
        this[this->tabledamage->maximumColumn] = value;
    }
    
    inline System::Int32 NewDataSet::damageRow::creature_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->tabledamage->creature_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'creature_Id\' in table \'damage\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::damageRow::creature_Id::set(System::Int32 value) {
        this[this->tabledamage->creature_IdColumn] = value;
    }
    
    inline ironfist::NewDataSet::creatureRow^  NewDataSet::damageRow::creatureRow::get() {
        return (cli::safe_cast<ironfist::NewDataSet::creatureRow^  >(this->GetParentRow(this->Table->ParentRelations[L"creature_damage"])));
    }
    inline System::Void NewDataSet::damageRow::creatureRow::set(ironfist::NewDataSet::creatureRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"creature_damage"]);
    }
    
    inline ::System::Boolean NewDataSet::damageRow::Iscreature_IdNull() {
        return this->IsNull(this->tabledamage->creature_IdColumn);
    }
    
    inline ::System::Void NewDataSet::damageRow::Setcreature_IdNull() {
        this[this->tabledamage->creature_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::_random_spawnRow::_random_spawnRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->table_random_spawn = (cli::safe_cast<ironfist::NewDataSet::_random_spawnDataTable^  >(this->Table));
    }
    
    inline System::Int32 NewDataSet::_random_spawnRow::minimum::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->table_random_spawn->minimumColumn]));
    }
    inline System::Void NewDataSet::_random_spawnRow::minimum::set(System::Int32 value) {
        this[this->table_random_spawn->minimumColumn] = value;
    }
    
    inline System::Int32 NewDataSet::_random_spawnRow::maximum::get() {
        return (cli::safe_cast<::System::Int32 >(this[this->table_random_spawn->maximumColumn]));
    }
    inline System::Void NewDataSet::_random_spawnRow::maximum::set(System::Int32 value) {
        this[this->table_random_spawn->maximumColumn] = value;
    }
    
    inline System::Int32 NewDataSet::_random_spawnRow::creature_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->table_random_spawn->creature_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'creature_Id\' in table \'random-spawn\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::_random_spawnRow::creature_Id::set(System::Int32 value) {
        this[this->table_random_spawn->creature_IdColumn] = value;
    }
    
    inline ironfist::NewDataSet::creatureRow^  NewDataSet::_random_spawnRow::creatureRow::get() {
        return (cli::safe_cast<ironfist::NewDataSet::creatureRow^  >(this->GetParentRow(this->Table->ParentRelations[L"creature_random-spawn"])));
    }
    inline System::Void NewDataSet::_random_spawnRow::creatureRow::set(ironfist::NewDataSet::creatureRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"creature_random-spawn"]);
    }
    
    inline ::System::Boolean NewDataSet::_random_spawnRow::Iscreature_IdNull() {
        return this->IsNull(this->table_random_spawn->creature_IdColumn);
    }
    
    inline ::System::Void NewDataSet::_random_spawnRow::Setcreature_IdNull() {
        this[this->table_random_spawn->creature_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::_creature_attributeRow::_creature_attributeRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->table_creature_attribute = (cli::safe_cast<ironfist::NewDataSet::_creature_attributeDataTable^  >(this->Table));
    }
    
    inline System::String^  NewDataSet::_creature_attributeRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->table_creature_attribute->nameColumn]));
    }
    inline System::Void NewDataSet::_creature_attributeRow::name::set(System::String^  value) {
        this[this->table_creature_attribute->nameColumn] = value;
    }
    
    inline System::Int32 NewDataSet::_creature_attributeRow::creature_Id::get() {
        try {
            return (cli::safe_cast<::System::Int32 >(this[this->table_creature_attribute->creature_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'creature_Id\' in table \'creature-attribute\' is DBNull.", 
                e));
        }
    }
    inline System::Void NewDataSet::_creature_attributeRow::creature_Id::set(System::Int32 value) {
        this[this->table_creature_attribute->creature_IdColumn] = value;
    }
    
    inline ironfist::NewDataSet::creatureRow^  NewDataSet::_creature_attributeRow::creatureRow::get() {
        return (cli::safe_cast<ironfist::NewDataSet::creatureRow^  >(this->GetParentRow(this->Table->ParentRelations[L"creature_creature-attribute"])));
    }
    inline System::Void NewDataSet::_creature_attributeRow::creatureRow::set(ironfist::NewDataSet::creatureRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"creature_creature-attribute"]);
    }
    
    inline ::System::Boolean NewDataSet::_creature_attributeRow::Iscreature_IdNull() {
        return this->IsNull(this->table_creature_attribute->creature_IdColumn);
    }
    
    inline ::System::Void NewDataSet::_creature_attributeRow::Setcreature_IdNull() {
        this[this->table_creature_attribute->creature_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline NewDataSet::creaturesRowChangeEvent::creaturesRowChangeEvent(ironfist::NewDataSet::creaturesRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ironfist::NewDataSet::creaturesRow^  NewDataSet::creaturesRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::creaturesRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::creatureRowChangeEvent::creatureRowChangeEvent(ironfist::NewDataSet::creatureRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ironfist::NewDataSet::creatureRow^  NewDataSet::creatureRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::creatureRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::damageRowChangeEvent::damageRowChangeEvent(ironfist::NewDataSet::damageRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ironfist::NewDataSet::damageRow^  NewDataSet::damageRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::damageRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::_random_spawnRowChangeEvent::_random_spawnRowChangeEvent(ironfist::NewDataSet::_random_spawnRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ironfist::NewDataSet::_random_spawnRow^  NewDataSet::_random_spawnRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::_random_spawnRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline NewDataSet::_creature_attributeRowChangeEvent::_creature_attributeRowChangeEvent(ironfist::NewDataSet::_creature_attributeRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline ironfist::NewDataSet::_creature_attributeRow^  NewDataSet::_creature_attributeRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction NewDataSet::_creature_attributeRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
