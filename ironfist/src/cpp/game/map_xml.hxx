// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef MAP_XML_HXX
#define MAP_XML_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
namespace ironfist_map
{
  class slot_t;
  class army_t;
  class hero_t;
  class mapVariable_t;
  class map_t;
  class secondarySkill;
  class artifact;
}


#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

namespace ironfist_map
{
  class slot_t: public ::xml_schema::type
  {
    public:
    // id
    // 
    typedef ::xml_schema::int_ id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    // quantity
    // 
    typedef ::xml_schema::int_ quantity_type;
    typedef ::xsd::cxx::tree::optional< quantity_type > quantity_optional;
    typedef ::xsd::cxx::tree::traits< quantity_type, char > quantity_traits;

    const quantity_optional&
    quantity () const;

    quantity_optional&
    quantity ();

    void
    quantity (const quantity_type& x);

    void
    quantity (const quantity_optional& x);

    // Constructors.
    //
    slot_t ();

    slot_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    slot_t (const slot_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual slot_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~slot_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    id_optional id_;
    quantity_optional quantity_;
  };

  class army_t: public ::xml_schema::type
  {
    public:
    // slot
    // 
    typedef ::ironfist_map::slot_t slot_type;
    typedef ::xsd::cxx::tree::sequence< slot_type > slot_sequence;
    typedef slot_sequence::iterator slot_iterator;
    typedef slot_sequence::const_iterator slot_const_iterator;
    typedef ::xsd::cxx::tree::traits< slot_type, char > slot_traits;

    const slot_sequence&
    slot () const;

    slot_sequence&
    slot ();

    void
    slot (const slot_sequence& s);

    // Constructors.
    //
    army_t ();

    army_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    army_t (const army_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual army_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~army_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    slot_sequence slot_;
  };

  class hero_t: public ::xml_schema::type
  {
    public:
    // spellpoints
    // 
    typedef ::xml_schema::int_ spellpoints_type;
    typedef ::xsd::cxx::tree::traits< spellpoints_type, char > spellpoints_traits;

    const spellpoints_type&
    spellpoints () const;

    spellpoints_type&
    spellpoints ();

    void
    spellpoints (const spellpoints_type& x);

    // idx
    // 
    typedef ::xml_schema::int_ idx_type;
    typedef ::xsd::cxx::tree::traits< idx_type, char > idx_traits;

    const idx_type&
    idx () const;

    idx_type&
    idx ();

    void
    idx (const idx_type& x);

    // ownerIdx
    // 
    typedef ::xml_schema::int_ ownerIdx_type;
    typedef ::xsd::cxx::tree::traits< ownerIdx_type, char > ownerIdx_traits;

    const ownerIdx_type&
    ownerIdx () const;

    ownerIdx_type&
    ownerIdx ();

    void
    ownerIdx (const ownerIdx_type& x);

    // field_4
    // 
    typedef ::xml_schema::int_ field_4_type;
    typedef ::xsd::cxx::tree::traits< field_4_type, char > field_4_traits;

    const field_4_type&
    field_4 () const;

    field_4_type&
    field_4 ();

    void
    field_4 (const field_4_type& x);

    // field_5
    // 
    typedef ::xml_schema::int_ field_5_type;
    typedef ::xsd::cxx::tree::traits< field_5_type, char > field_5_traits;

    const field_5_type&
    field_5 () const;

    field_5_type&
    field_5 ();

    void
    field_5 (const field_5_type& x);

    // field_6
    // 
    typedef ::xml_schema::int_ field_6_type;
    typedef ::xsd::cxx::tree::traits< field_6_type, char > field_6_traits;

    const field_6_type&
    field_6 () const;

    field_6_type&
    field_6 ();

    void
    field_6 (const field_6_type& x);

    // field_7
    // 
    typedef ::xml_schema::int_ field_7_type;
    typedef ::xsd::cxx::tree::traits< field_7_type, char > field_7_traits;

    const field_7_type&
    field_7 () const;

    field_7_type&
    field_7 ();

    void
    field_7 (const field_7_type& x);

    // field_8
    // 
    typedef ::xml_schema::int_ field_8_type;
    typedef ::xsd::cxx::tree::traits< field_8_type, char > field_8_traits;

    const field_8_type&
    field_8 () const;

    field_8_type&
    field_8 ();

    void
    field_8 (const field_8_type& x);

    // field_9
    // 
    typedef ::xml_schema::int_ field_9_type;
    typedef ::xsd::cxx::tree::traits< field_9_type, char > field_9_traits;

    const field_9_type&
    field_9 () const;

    field_9_type&
    field_9 ();

    void
    field_9 (const field_9_type& x);

    // name
    // 
    typedef ::xml_schema::string name_type;
    typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

    const name_type&
    name () const;

    name_type&
    name ();

    void
    name (const name_type& x);

    void
    name (::std::auto_ptr< name_type > p);

    // factionID
    // 
    typedef ::xml_schema::int_ factionID_type;
    typedef ::xsd::cxx::tree::traits< factionID_type, char > factionID_traits;

    const factionID_type&
    factionID () const;

    factionID_type&
    factionID ();

    void
    factionID (const factionID_type& x);

    // heroID
    // 
    typedef ::xml_schema::int_ heroID_type;
    typedef ::xsd::cxx::tree::traits< heroID_type, char > heroID_traits;

    const heroID_type&
    heroID () const;

    heroID_type&
    heroID ();

    void
    heroID (const heroID_type& x);

    // x
    // 
    typedef ::xml_schema::int_ x_type;
    typedef ::xsd::cxx::tree::traits< x_type, char > x_traits;

    const x_type&
    x () const;

    x_type&
    x ();

    void
    x (const x_type& x);

    // y
    // 
    typedef ::xml_schema::int_ y_type;
    typedef ::xsd::cxx::tree::traits< y_type, char > y_traits;

    const y_type&
    y () const;

    y_type&
    y ();

    void
    y (const y_type& x);

    // field_21
    // 
    typedef ::xml_schema::int_ field_21_type;
    typedef ::xsd::cxx::tree::traits< field_21_type, char > field_21_traits;

    const field_21_type&
    field_21 () const;

    field_21_type&
    field_21 ();

    void
    field_21 (const field_21_type& x);

    // field_23
    // 
    typedef ::xml_schema::int_ field_23_type;
    typedef ::xsd::cxx::tree::traits< field_23_type, char > field_23_traits;

    const field_23_type&
    field_23 () const;

    field_23_type&
    field_23 ();

    void
    field_23 (const field_23_type& x);

    // field_25
    // 
    typedef ::xml_schema::int_ field_25_type;
    typedef ::xsd::cxx::tree::traits< field_25_type, char > field_25_traits;

    const field_25_type&
    field_25 () const;

    field_25_type&
    field_25 ();

    void
    field_25 (const field_25_type& x);

    // field_27
    // 
    typedef ::xml_schema::int_ field_27_type;
    typedef ::xsd::cxx::tree::traits< field_27_type, char > field_27_traits;

    const field_27_type&
    field_27 () const;

    field_27_type&
    field_27 ();

    void
    field_27 (const field_27_type& x);

    // field_29
    // 
    typedef ::xml_schema::int_ field_29_type;
    typedef ::xsd::cxx::tree::traits< field_29_type, char > field_29_traits;

    const field_29_type&
    field_29 () const;

    field_29_type&
    field_29 ();

    void
    field_29 (const field_29_type& x);

    // field_2B
    // 
    typedef ::xml_schema::int_ field_2B_type;
    typedef ::xsd::cxx::tree::traits< field_2B_type, char > field_2B_traits;

    const field_2B_type&
    field_2B () const;

    field_2B_type&
    field_2B ();

    void
    field_2B (const field_2B_type& x);

    // occupiedObjType
    // 
    typedef ::xml_schema::int_ occupiedObjType_type;
    typedef ::xsd::cxx::tree::traits< occupiedObjType_type, char > occupiedObjType_traits;

    const occupiedObjType_type&
    occupiedObjType () const;

    occupiedObjType_type&
    occupiedObjType ();

    void
    occupiedObjType (const occupiedObjType_type& x);

    // occupiedObjVal
    // 
    typedef ::xml_schema::int_ occupiedObjVal_type;
    typedef ::xsd::cxx::tree::traits< occupiedObjVal_type, char > occupiedObjVal_traits;

    const occupiedObjVal_type&
    occupiedObjVal () const;

    occupiedObjVal_type&
    occupiedObjVal ();

    void
    occupiedObjVal (const occupiedObjVal_type& x);

    // mobility
    // 
    typedef ::xml_schema::int_ mobility_type;
    typedef ::xsd::cxx::tree::traits< mobility_type, char > mobility_traits;

    const mobility_type&
    mobility () const;

    mobility_type&
    mobility ();

    void
    mobility (const mobility_type& x);

    // remainingMobility
    // 
    typedef ::xml_schema::int_ remainingMobility_type;
    typedef ::xsd::cxx::tree::traits< remainingMobility_type, char > remainingMobility_traits;

    const remainingMobility_type&
    remainingMobility () const;

    remainingMobility_type&
    remainingMobility ();

    void
    remainingMobility (const remainingMobility_type& x);

    // experience
    // 
    typedef ::xml_schema::int_ experience_type;
    typedef ::xsd::cxx::tree::traits< experience_type, char > experience_traits;

    const experience_type&
    experience () const;

    experience_type&
    experience ();

    void
    experience (const experience_type& x);

    // oldLevel
    // 
    typedef ::xml_schema::int_ oldLevel_type;
    typedef ::xsd::cxx::tree::traits< oldLevel_type, char > oldLevel_traits;

    const oldLevel_type&
    oldLevel () const;

    oldLevel_type&
    oldLevel ();

    void
    oldLevel (const oldLevel_type& x);

    // attack
    // 
    typedef ::xml_schema::int_ attack_type;
    typedef ::xsd::cxx::tree::traits< attack_type, char > attack_traits;

    const attack_type&
    attack () const;

    attack_type&
    attack ();

    void
    attack (const attack_type& x);

    // defense
    // 
    typedef ::xml_schema::int_ defense_type;
    typedef ::xsd::cxx::tree::traits< defense_type, char > defense_traits;

    const defense_type&
    defense () const;

    defense_type&
    defense ();

    void
    defense (const defense_type& x);

    // spellpower
    // 
    typedef ::xml_schema::int_ spellpower_type;
    typedef ::xsd::cxx::tree::traits< spellpower_type, char > spellpower_traits;

    const spellpower_type&
    spellpower () const;

    spellpower_type&
    spellpower ();

    void
    spellpower (const spellpower_type& x);

    // knowledge
    // 
    typedef ::xml_schema::int_ knowledge_type;
    typedef ::xsd::cxx::tree::traits< knowledge_type, char > knowledge_traits;

    const knowledge_type&
    knowledge () const;

    knowledge_type&
    knowledge ();

    void
    knowledge (const knowledge_type& x);

    // field_43
    // 
    typedef ::xml_schema::int_ field_43_type;
    typedef ::xsd::cxx::tree::traits< field_43_type, char > field_43_traits;

    const field_43_type&
    field_43 () const;

    field_43_type&
    field_43 ();

    void
    field_43 (const field_43_type& x);

    // tempMoraleBonuses
    // 
    typedef ::xml_schema::int_ tempMoraleBonuses_type;
    typedef ::xsd::cxx::tree::traits< tempMoraleBonuses_type, char > tempMoraleBonuses_traits;

    const tempMoraleBonuses_type&
    tempMoraleBonuses () const;

    tempMoraleBonuses_type&
    tempMoraleBonuses ();

    void
    tempMoraleBonuses (const tempMoraleBonuses_type& x);

    // tempLuckBonuses
    // 
    typedef ::xml_schema::int_ tempLuckBonuses_type;
    typedef ::xsd::cxx::tree::traits< tempLuckBonuses_type, char > tempLuckBonuses_traits;

    const tempLuckBonuses_type&
    tempLuckBonuses () const;

    tempLuckBonuses_type&
    tempLuckBonuses ();

    void
    tempLuckBonuses (const tempLuckBonuses_type& x);

    // field_46
    // 
    typedef ::xml_schema::int_ field_46_type;
    typedef ::xsd::cxx::tree::traits< field_46_type, char > field_46_traits;

    const field_46_type&
    field_46 () const;

    field_46_type&
    field_46 ();

    void
    field_46 (const field_46_type& x);

    // gazeboesVisited
    // 
    typedef ::xml_schema::int_ gazeboesVisited_type;
    typedef ::xsd::cxx::tree::traits< gazeboesVisited_type, char > gazeboesVisited_traits;

    const gazeboesVisited_type&
    gazeboesVisited () const;

    gazeboesVisited_type&
    gazeboesVisited ();

    void
    gazeboesVisited (const gazeboesVisited_type& x);

    // fortsVisited
    // 
    typedef ::xml_schema::int_ fortsVisited_type;
    typedef ::xsd::cxx::tree::traits< fortsVisited_type, char > fortsVisited_traits;

    const fortsVisited_type&
    fortsVisited () const;

    fortsVisited_type&
    fortsVisited ();

    void
    fortsVisited (const fortsVisited_type& x);

    // witchDoctorHutsVisited
    // 
    typedef ::xml_schema::int_ witchDoctorHutsVisited_type;
    typedef ::xsd::cxx::tree::traits< witchDoctorHutsVisited_type, char > witchDoctorHutsVisited_traits;

    const witchDoctorHutsVisited_type&
    witchDoctorHutsVisited () const;

    witchDoctorHutsVisited_type&
    witchDoctorHutsVisited ();

    void
    witchDoctorHutsVisited (const witchDoctorHutsVisited_type& x);

    // mercenaryCampsVisited
    // 
    typedef ::xml_schema::int_ mercenaryCampsVisited_type;
    typedef ::xsd::cxx::tree::traits< mercenaryCampsVisited_type, char > mercenaryCampsVisited_traits;

    const mercenaryCampsVisited_type&
    mercenaryCampsVisited () const;

    mercenaryCampsVisited_type&
    mercenaryCampsVisited ();

    void
    mercenaryCampsVisited (const mercenaryCampsVisited_type& x);

    // standingStonesVisited
    // 
    typedef ::xml_schema::int_ standingStonesVisited_type;
    typedef ::xsd::cxx::tree::traits< standingStonesVisited_type, char > standingStonesVisited_traits;

    const standingStonesVisited_type&
    standingStonesVisited () const;

    standingStonesVisited_type&
    standingStonesVisited ();

    void
    standingStonesVisited (const standingStonesVisited_type& x);

    // treesOfKnowledgeVisited
    // 
    typedef ::xml_schema::int_ treesOfKnowledgeVisited_type;
    typedef ::xsd::cxx::tree::traits< treesOfKnowledgeVisited_type, char > treesOfKnowledgeVisited_traits;

    const treesOfKnowledgeVisited_type&
    treesOfKnowledgeVisited () const;

    treesOfKnowledgeVisited_type&
    treesOfKnowledgeVisited ();

    void
    treesOfKnowledgeVisited (const treesOfKnowledgeVisited_type& x);

    // xanadusVisited
    // 
    typedef ::xml_schema::int_ xanadusVisited_type;
    typedef ::xsd::cxx::tree::traits< xanadusVisited_type, char > xanadusVisited_traits;

    const xanadusVisited_type&
    xanadusVisited () const;

    xanadusVisited_type&
    xanadusVisited ();

    void
    xanadusVisited (const xanadusVisited_type& x);

    // randomSeed
    // 
    typedef ::xml_schema::int_ randomSeed_type;
    typedef ::xsd::cxx::tree::traits< randomSeed_type, char > randomSeed_traits;

    const randomSeed_type&
    randomSeed () const;

    randomSeed_type&
    randomSeed ();

    void
    randomSeed (const randomSeed_type& x);

    // wisdomLastOffered
    // 
    typedef ::xml_schema::boolean wisdomLastOffered_type;
    typedef ::xsd::cxx::tree::traits< wisdomLastOffered_type, char > wisdomLastOffered_traits;

    const wisdomLastOffered_type&
    wisdomLastOffered () const;

    wisdomLastOffered_type&
    wisdomLastOffered ();

    void
    wisdomLastOffered (const wisdomLastOffered_type& x);

    // army
    // 
    typedef ::ironfist_map::army_t army_type;
    typedef ::xsd::cxx::tree::traits< army_type, char > army_traits;

    const army_type&
    army () const;

    army_type&
    army ();

    void
    army (const army_type& x);

    void
    army (::std::auto_ptr< army_type > p);

    // secondarySkill
    // 
    typedef ::ironfist_map::secondarySkill secondarySkill_type;
    typedef ::xsd::cxx::tree::sequence< secondarySkill_type > secondarySkill_sequence;
    typedef secondarySkill_sequence::iterator secondarySkill_iterator;
    typedef secondarySkill_sequence::const_iterator secondarySkill_const_iterator;
    typedef ::xsd::cxx::tree::traits< secondarySkill_type, char > secondarySkill_traits;

    const secondarySkill_sequence&
    secondarySkill () const;

    secondarySkill_sequence&
    secondarySkill ();

    void
    secondarySkill (const secondarySkill_sequence& s);

    // spell
    // 
    typedef ::xml_schema::int_ spell_type;
    typedef ::xsd::cxx::tree::sequence< spell_type > spell_sequence;
    typedef spell_sequence::iterator spell_iterator;
    typedef spell_sequence::const_iterator spell_const_iterator;
    typedef ::xsd::cxx::tree::traits< spell_type, char > spell_traits;

    const spell_sequence&
    spell () const;

    spell_sequence&
    spell ();

    void
    spell (const spell_sequence& s);

    // artifact
    // 
    typedef ::ironfist_map::artifact artifact_type;
    typedef ::xsd::cxx::tree::sequence< artifact_type > artifact_sequence;
    typedef artifact_sequence::iterator artifact_iterator;
    typedef artifact_sequence::const_iterator artifact_const_iterator;
    typedef ::xsd::cxx::tree::traits< artifact_type, char > artifact_traits;

    const artifact_sequence&
    artifact () const;

    artifact_sequence&
    artifact ();

    void
    artifact (const artifact_sequence& s);

    // flags
    // 
    typedef ::xml_schema::int_ flags_type;
    typedef ::xsd::cxx::tree::traits< flags_type, char > flags_traits;

    const flags_type&
    flags () const;

    flags_type&
    flags ();

    void
    flags (const flags_type& x);

    // isCaptain
    // 
    typedef ::xml_schema::boolean isCaptain_type;
    typedef ::xsd::cxx::tree::traits< isCaptain_type, char > isCaptain_traits;

    const isCaptain_type&
    isCaptain () const;

    isCaptain_type&
    isCaptain ();

    void
    isCaptain (const isCaptain_type& x);

    // field_E8
    // 
    typedef ::xml_schema::int_ field_E8_type;
    typedef ::xsd::cxx::tree::traits< field_E8_type, char > field_E8_traits;

    const field_E8_type&
    field_E8 () const;

    field_E8_type&
    field_E8 ();

    void
    field_E8 (const field_E8_type& x);

    // Constructors.
    //
    hero_t (const spellpoints_type&,
            const idx_type&,
            const ownerIdx_type&,
            const field_4_type&,
            const field_5_type&,
            const field_6_type&,
            const field_7_type&,
            const field_8_type&,
            const field_9_type&,
            const name_type&,
            const factionID_type&,
            const heroID_type&,
            const x_type&,
            const y_type&,
            const field_21_type&,
            const field_23_type&,
            const field_25_type&,
            const field_27_type&,
            const field_29_type&,
            const field_2B_type&,
            const occupiedObjType_type&,
            const occupiedObjVal_type&,
            const mobility_type&,
            const remainingMobility_type&,
            const experience_type&,
            const oldLevel_type&,
            const attack_type&,
            const defense_type&,
            const spellpower_type&,
            const knowledge_type&,
            const field_43_type&,
            const tempMoraleBonuses_type&,
            const tempLuckBonuses_type&,
            const field_46_type&,
            const gazeboesVisited_type&,
            const fortsVisited_type&,
            const witchDoctorHutsVisited_type&,
            const mercenaryCampsVisited_type&,
            const standingStonesVisited_type&,
            const treesOfKnowledgeVisited_type&,
            const xanadusVisited_type&,
            const randomSeed_type&,
            const wisdomLastOffered_type&,
            const army_type&,
            const flags_type&,
            const isCaptain_type&,
            const field_E8_type&);

    hero_t (const spellpoints_type&,
            const idx_type&,
            const ownerIdx_type&,
            const field_4_type&,
            const field_5_type&,
            const field_6_type&,
            const field_7_type&,
            const field_8_type&,
            const field_9_type&,
            const name_type&,
            const factionID_type&,
            const heroID_type&,
            const x_type&,
            const y_type&,
            const field_21_type&,
            const field_23_type&,
            const field_25_type&,
            const field_27_type&,
            const field_29_type&,
            const field_2B_type&,
            const occupiedObjType_type&,
            const occupiedObjVal_type&,
            const mobility_type&,
            const remainingMobility_type&,
            const experience_type&,
            const oldLevel_type&,
            const attack_type&,
            const defense_type&,
            const spellpower_type&,
            const knowledge_type&,
            const field_43_type&,
            const tempMoraleBonuses_type&,
            const tempLuckBonuses_type&,
            const field_46_type&,
            const gazeboesVisited_type&,
            const fortsVisited_type&,
            const witchDoctorHutsVisited_type&,
            const mercenaryCampsVisited_type&,
            const standingStonesVisited_type&,
            const treesOfKnowledgeVisited_type&,
            const xanadusVisited_type&,
            const randomSeed_type&,
            const wisdomLastOffered_type&,
            ::std::auto_ptr< army_type >&,
            const flags_type&,
            const isCaptain_type&,
            const field_E8_type&);

    hero_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    hero_t (const hero_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

    virtual hero_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~hero_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< spellpoints_type > spellpoints_;
    ::xsd::cxx::tree::one< idx_type > idx_;
    ::xsd::cxx::tree::one< ownerIdx_type > ownerIdx_;
    ::xsd::cxx::tree::one< field_4_type > field_4_;
    ::xsd::cxx::tree::one< field_5_type > field_5_;
    ::xsd::cxx::tree::one< field_6_type > field_6_;
    ::xsd::cxx::tree::one< field_7_type > field_7_;
    ::xsd::cxx::tree::one< field_8_type > field_8_;
    ::xsd::cxx::tree::one< field_9_type > field_9_;
    ::xsd::cxx::tree::one< name_type > name_;
    ::xsd::cxx::tree::one< factionID_type > factionID_;
    ::xsd::cxx::tree::one< heroID_type > heroID_;
    ::xsd::cxx::tree::one< x_type > x_;
    ::xsd::cxx::tree::one< y_type > y_;
    ::xsd::cxx::tree::one< field_21_type > field_21_;
    ::xsd::cxx::tree::one< field_23_type > field_23_;
    ::xsd::cxx::tree::one< field_25_type > field_25_;
    ::xsd::cxx::tree::one< field_27_type > field_27_;
    ::xsd::cxx::tree::one< field_29_type > field_29_;
    ::xsd::cxx::tree::one< field_2B_type > field_2B_;
    ::xsd::cxx::tree::one< occupiedObjType_type > occupiedObjType_;
    ::xsd::cxx::tree::one< occupiedObjVal_type > occupiedObjVal_;
    ::xsd::cxx::tree::one< mobility_type > mobility_;
    ::xsd::cxx::tree::one< remainingMobility_type > remainingMobility_;
    ::xsd::cxx::tree::one< experience_type > experience_;
    ::xsd::cxx::tree::one< oldLevel_type > oldLevel_;
    ::xsd::cxx::tree::one< attack_type > attack_;
    ::xsd::cxx::tree::one< defense_type > defense_;
    ::xsd::cxx::tree::one< spellpower_type > spellpower_;
    ::xsd::cxx::tree::one< knowledge_type > knowledge_;
    ::xsd::cxx::tree::one< field_43_type > field_43_;
    ::xsd::cxx::tree::one< tempMoraleBonuses_type > tempMoraleBonuses_;
    ::xsd::cxx::tree::one< tempLuckBonuses_type > tempLuckBonuses_;
    ::xsd::cxx::tree::one< field_46_type > field_46_;
    ::xsd::cxx::tree::one< gazeboesVisited_type > gazeboesVisited_;
    ::xsd::cxx::tree::one< fortsVisited_type > fortsVisited_;
    ::xsd::cxx::tree::one< witchDoctorHutsVisited_type > witchDoctorHutsVisited_;
    ::xsd::cxx::tree::one< mercenaryCampsVisited_type > mercenaryCampsVisited_;
    ::xsd::cxx::tree::one< standingStonesVisited_type > standingStonesVisited_;
    ::xsd::cxx::tree::one< treesOfKnowledgeVisited_type > treesOfKnowledgeVisited_;
    ::xsd::cxx::tree::one< xanadusVisited_type > xanadusVisited_;
    ::xsd::cxx::tree::one< randomSeed_type > randomSeed_;
    ::xsd::cxx::tree::one< wisdomLastOffered_type > wisdomLastOffered_;
    ::xsd::cxx::tree::one< army_type > army_;
    secondarySkill_sequence secondarySkill_;
    spell_sequence spell_;
    artifact_sequence artifact_;
    ::xsd::cxx::tree::one< flags_type > flags_;
    ::xsd::cxx::tree::one< isCaptain_type > isCaptain_;
    ::xsd::cxx::tree::one< field_E8_type > field_E8_;
  };

  class mapVariable_t: public ::xml_schema::type
  {
    public:
    // id
    // 
    typedef ::xml_schema::string id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    void
    id (::std::auto_ptr< id_type > p);

    // value
    // 
    typedef ::xml_schema::string value_type;
    typedef ::xsd::cxx::tree::optional< value_type > value_optional;
    typedef ::xsd::cxx::tree::traits< value_type, char > value_traits;

    const value_optional&
    value () const;

    value_optional&
    value ();

    void
    value (const value_type& x);

    void
    value (const value_optional& x);

    void
    value (::std::auto_ptr< value_type > p);

    // Constructors.
    //
    mapVariable_t ();

    mapVariable_t (const ::xercesc::DOMElement& e,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    mapVariable_t (const mapVariable_t& x,
                   ::xml_schema::flags f = 0,
                   ::xml_schema::container* c = 0);

    virtual mapVariable_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~mapVariable_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    id_optional id_;
    value_optional value_;
  };

  class map_t: public ::xml_schema::type
  {
    public:
    // hero
    // 
    typedef ::ironfist_map::hero_t hero_type;
    typedef ::xsd::cxx::tree::sequence< hero_type > hero_sequence;
    typedef hero_sequence::iterator hero_iterator;
    typedef hero_sequence::const_iterator hero_const_iterator;
    typedef ::xsd::cxx::tree::traits< hero_type, char > hero_traits;

    const hero_sequence&
    hero () const;

    hero_sequence&
    hero ();

    void
    hero (const hero_sequence& s);

    // mapVariable
    // 
    typedef ::ironfist_map::mapVariable_t mapVariable_type;
    typedef ::xsd::cxx::tree::sequence< mapVariable_type > mapVariable_sequence;
    typedef mapVariable_sequence::iterator mapVariable_iterator;
    typedef mapVariable_sequence::const_iterator mapVariable_const_iterator;
    typedef ::xsd::cxx::tree::traits< mapVariable_type, char > mapVariable_traits;

    const mapVariable_sequence&
    mapVariable () const;

    mapVariable_sequence&
    mapVariable ();

    void
    mapVariable (const mapVariable_sequence& s);

    // script
    // 
    typedef ::xml_schema::string script_type;
    typedef ::xsd::cxx::tree::optional< script_type > script_optional;
    typedef ::xsd::cxx::tree::traits< script_type, char > script_traits;

    const script_optional&
    script () const;

    script_optional&
    script ();

    void
    script (const script_type& x);

    void
    script (const script_optional& x);

    void
    script (::std::auto_ptr< script_type > p);

    // raw
    // 
    typedef ::xml_schema::base64_binary raw_type;
    typedef ::xsd::cxx::tree::traits< raw_type, char > raw_traits;

    const raw_type&
    raw () const;

    raw_type&
    raw ();

    void
    raw (const raw_type& x);

    void
    raw (::std::auto_ptr< raw_type > p);

    // Constructors.
    //
    map_t (const raw_type&);

    map_t (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    map_t (const map_t& x,
           ::xml_schema::flags f = 0,
           ::xml_schema::container* c = 0);

    virtual map_t*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~map_t ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    hero_sequence hero_;
    mapVariable_sequence mapVariable_;
    script_optional script_;
    ::xsd::cxx::tree::one< raw_type > raw_;
  };

  class secondarySkill: public ::xml_schema::type
  {
    public:
    // id
    // 
    typedef ::xml_schema::int_ id_type;
    typedef ::xsd::cxx::tree::optional< id_type > id_optional;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_optional&
    id () const;

    id_optional&
    id ();

    void
    id (const id_type& x);

    void
    id (const id_optional& x);

    // level
    // 
    typedef ::xml_schema::int_ level_type;
    typedef ::xsd::cxx::tree::optional< level_type > level_optional;
    typedef ::xsd::cxx::tree::traits< level_type, char > level_traits;

    const level_optional&
    level () const;

    level_optional&
    level ();

    void
    level (const level_type& x);

    void
    level (const level_optional& x);

    // idx
    // 
    typedef ::xml_schema::int_ idx_type;
    typedef ::xsd::cxx::tree::optional< idx_type > idx_optional;
    typedef ::xsd::cxx::tree::traits< idx_type, char > idx_traits;

    const idx_optional&
    idx () const;

    idx_optional&
    idx ();

    void
    idx (const idx_type& x);

    void
    idx (const idx_optional& x);

    // Constructors.
    //
    secondarySkill ();

    secondarySkill (const ::xercesc::DOMElement& e,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    secondarySkill (const secondarySkill& x,
                    ::xml_schema::flags f = 0,
                    ::xml_schema::container* c = 0);

    virtual secondarySkill*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~secondarySkill ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    id_optional id_;
    level_optional level_;
    idx_optional idx_;
  };

  class artifact: public ::xml_schema::type
  {
    public:
    // id
    // 
    typedef ::xml_schema::int_ id_type;
    typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

    const id_type&
    id () const;

    id_type&
    id ();

    void
    id (const id_type& x);

    // spell
    // 
    typedef ::xml_schema::int_ spell_type;
    typedef ::xsd::cxx::tree::traits< spell_type, char > spell_traits;

    const spell_type&
    spell () const;

    spell_type&
    spell ();

    void
    spell (const spell_type& x);

    static spell_type
    spell_default_value ();

    // Constructors.
    //
    artifact (const id_type&);

    artifact (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    artifact (const artifact& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

    virtual artifact*
    _clone (::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0) const;

    virtual 
    ~artifact ();

    // Implementation.
    //
    protected:
    void
    parse (::xsd::cxx::xml::dom::parser< char >&,
           ::xml_schema::flags);

    protected:
    ::xsd::cxx::tree::one< id_type > id_;
    ::xsd::cxx::tree::one< spell_type > spell_;
  };
}

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

namespace ironfist_map
{
  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (const ::std::string& uri,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (const ::std::string& uri,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (const ::std::string& uri,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               const ::std::string& id,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               const ::std::string& id,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::xercesc::InputSource& is,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::xercesc::InputSource& is,
               ::xml_schema::error_handler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::xercesc::InputSource& is,
               ::xercesc::DOMErrorHandler& eh,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f = 0,
               const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (const ::std::string& uri,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (const ::std::string& uri,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (const ::std::string& uri,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       const ::std::string& id,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       const ::std::string& id,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::xercesc::InputSource& is,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::xercesc::InputSource& is,
       ::xml_schema::error_handler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::xercesc::InputSource& is,
       ::xercesc::DOMErrorHandler& eh,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f = 0,
       const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse a URI or a local file.
  //

  ::std::auto_ptr< ::xml_schema::string >
  script (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  script (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  script (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse std::istream.
  //

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::InputSource.
  //

  ::std::auto_ptr< ::xml_schema::string >
  script (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  script (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  script (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  // Parse xercesc::DOMDocument.
  //

  ::std::auto_ptr< ::xml_schema::string >
  script (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

  ::std::auto_ptr< ::xml_schema::string >
  script (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());
}

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

namespace ironfist_map
{
  void
  operator<< (::xercesc::DOMElement&, const slot_t&);

  void
  operator<< (::xercesc::DOMElement&, const army_t&);

  void
  operator<< (::xercesc::DOMElement&, const hero_t&);

  void
  operator<< (::xercesc::DOMElement&, const mapVariable_t&);

  void
  operator<< (::xercesc::DOMElement&, const map_t&);

  // Serialize to std::ostream.
  //

  void
  map (::std::ostream& os,
       const ::ironfist_map::map_t& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  map (::std::ostream& os,
       const ::ironfist_map::map_t& x, 
       ::xml_schema::error_handler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  map (::std::ostream& os,
       const ::ironfist_map::map_t& x, 
       ::xercesc::DOMErrorHandler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  map (::xercesc::XMLFormatTarget& ft,
       const ::ironfist_map::map_t& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  map (::xercesc::XMLFormatTarget& ft,
       const ::ironfist_map::map_t& x, 
       ::xml_schema::error_handler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  map (::xercesc::XMLFormatTarget& ft,
       const ::ironfist_map::map_t& x, 
       ::xercesc::DOMErrorHandler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  map (::xercesc::DOMDocument& d,
       const ::ironfist_map::map_t& x,
       ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  map (const ::ironfist_map::map_t& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  hero (::std::ostream& os,
        const ::ironfist_map::hero_t& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  hero (::std::ostream& os,
        const ::ironfist_map::hero_t& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  hero (::std::ostream& os,
        const ::ironfist_map::hero_t& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  hero (::xercesc::XMLFormatTarget& ft,
        const ::ironfist_map::hero_t& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  hero (::xercesc::XMLFormatTarget& ft,
        const ::ironfist_map::hero_t& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  hero (::xercesc::XMLFormatTarget& ft,
        const ::ironfist_map::hero_t& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  hero (::xercesc::DOMDocument& d,
        const ::ironfist_map::hero_t& x,
        ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  hero (const ::ironfist_map::hero_t& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  mapVariable (::std::ostream& os,
               const ::ironfist_map::mapVariable_t& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  mapVariable (::std::ostream& os,
               const ::ironfist_map::mapVariable_t& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  mapVariable (::std::ostream& os,
               const ::ironfist_map::mapVariable_t& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  mapVariable (::xercesc::XMLFormatTarget& ft,
               const ::ironfist_map::mapVariable_t& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  mapVariable (::xercesc::XMLFormatTarget& ft,
               const ::ironfist_map::mapVariable_t& x, 
               ::xml_schema::error_handler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  void
  mapVariable (::xercesc::XMLFormatTarget& ft,
               const ::ironfist_map::mapVariable_t& x, 
               ::xercesc::DOMErrorHandler& eh,
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               const ::std::string& e = "UTF-8",
               ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  mapVariable (::xercesc::DOMDocument& d,
               const ::ironfist_map::mapVariable_t& x,
               ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  mapVariable (const ::ironfist_map::mapVariable_t& x, 
               const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
               ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  raw (::std::ostream& os,
       const ::xml_schema::base64_binary& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  raw (::std::ostream& os,
       const ::xml_schema::base64_binary& x, 
       ::xml_schema::error_handler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  raw (::std::ostream& os,
       const ::xml_schema::base64_binary& x, 
       ::xercesc::DOMErrorHandler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  raw (::xercesc::XMLFormatTarget& ft,
       const ::xml_schema::base64_binary& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  raw (::xercesc::XMLFormatTarget& ft,
       const ::xml_schema::base64_binary& x, 
       ::xml_schema::error_handler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  void
  raw (::xercesc::XMLFormatTarget& ft,
       const ::xml_schema::base64_binary& x, 
       ::xercesc::DOMErrorHandler& eh,
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       const ::std::string& e = "UTF-8",
       ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  raw (::xercesc::DOMDocument& d,
       const ::xml_schema::base64_binary& x,
       ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  raw (const ::xml_schema::base64_binary& x, 
       const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
       ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  army (::std::ostream& os,
        const ::ironfist_map::army_t& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  army (::std::ostream& os,
        const ::ironfist_map::army_t& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  army (::std::ostream& os,
        const ::ironfist_map::army_t& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  army (::xercesc::XMLFormatTarget& ft,
        const ::ironfist_map::army_t& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  army (::xercesc::XMLFormatTarget& ft,
        const ::ironfist_map::army_t& x, 
        ::xml_schema::error_handler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  void
  army (::xercesc::XMLFormatTarget& ft,
        const ::ironfist_map::army_t& x, 
        ::xercesc::DOMErrorHandler& eh,
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        const ::std::string& e = "UTF-8",
        ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  army (::xercesc::DOMDocument& d,
        const ::ironfist_map::army_t& x,
        ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  army (const ::ironfist_map::army_t& x, 
        const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
        ::xml_schema::flags f = 0);

  // Serialize to std::ostream.
  //

  void
  script (::std::ostream& os,
          const ::xml_schema::string& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  script (::std::ostream& os,
          const ::xml_schema::string& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  script (::std::ostream& os,
          const ::xml_schema::string& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to xercesc::XMLFormatTarget.
  //

  void
  script (::xercesc::XMLFormatTarget& ft,
          const ::xml_schema::string& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  script (::xercesc::XMLFormatTarget& ft,
          const ::xml_schema::string& x, 
          ::xml_schema::error_handler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  void
  script (::xercesc::XMLFormatTarget& ft,
          const ::xml_schema::string& x, 
          ::xercesc::DOMErrorHandler& eh,
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          const ::std::string& e = "UTF-8",
          ::xml_schema::flags f = 0);

  // Serialize to an existing xercesc::DOMDocument.
  //

  void
  script (::xercesc::DOMDocument& d,
          const ::xml_schema::string& x,
          ::xml_schema::flags f = 0);

  // Serialize to a new xercesc::DOMDocument.
  //

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  script (const ::xml_schema::string& x, 
          const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
          ::xml_schema::flags f = 0);

  void
  operator<< (::xercesc::DOMElement&, const secondarySkill&);

  void
  operator<< (::xercesc::DOMElement&, const artifact&);
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // MAP_XML_HXX
