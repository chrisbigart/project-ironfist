// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "map_xml.hxx"

namespace ironfist_map
{
  // slot_t
  // 

  const slot_t::id_optional& slot_t::
  id () const
  {
    return this->id_;
  }

  slot_t::id_optional& slot_t::
  id ()
  {
    return this->id_;
  }

  void slot_t::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void slot_t::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  const slot_t::quantity_optional& slot_t::
  quantity () const
  {
    return this->quantity_;
  }

  slot_t::quantity_optional& slot_t::
  quantity ()
  {
    return this->quantity_;
  }

  void slot_t::
  quantity (const quantity_type& x)
  {
    this->quantity_.set (x);
  }

  void slot_t::
  quantity (const quantity_optional& x)
  {
    this->quantity_ = x;
  }


  // army_t
  // 

  const army_t::slot_sequence& army_t::
  slot () const
  {
    return this->slot_;
  }

  army_t::slot_sequence& army_t::
  slot ()
  {
    return this->slot_;
  }

  void army_t::
  slot (const slot_sequence& s)
  {
    this->slot_ = s;
  }


  // hero_t
  // 

  const hero_t::spellpoints_type& hero_t::
  spellpoints () const
  {
    return this->spellpoints_.get ();
  }

  hero_t::spellpoints_type& hero_t::
  spellpoints ()
  {
    return this->spellpoints_.get ();
  }

  void hero_t::
  spellpoints (const spellpoints_type& x)
  {
    this->spellpoints_.set (x);
  }

  const hero_t::idx_type& hero_t::
  idx () const
  {
    return this->idx_.get ();
  }

  hero_t::idx_type& hero_t::
  idx ()
  {
    return this->idx_.get ();
  }

  void hero_t::
  idx (const idx_type& x)
  {
    this->idx_.set (x);
  }

  const hero_t::ownerIdx_type& hero_t::
  ownerIdx () const
  {
    return this->ownerIdx_.get ();
  }

  hero_t::ownerIdx_type& hero_t::
  ownerIdx ()
  {
    return this->ownerIdx_.get ();
  }

  void hero_t::
  ownerIdx (const ownerIdx_type& x)
  {
    this->ownerIdx_.set (x);
  }

  const hero_t::field_4_type& hero_t::
  field_4 () const
  {
    return this->field_4_.get ();
  }

  hero_t::field_4_type& hero_t::
  field_4 ()
  {
    return this->field_4_.get ();
  }

  void hero_t::
  field_4 (const field_4_type& x)
  {
    this->field_4_.set (x);
  }

  const hero_t::field_5_type& hero_t::
  field_5 () const
  {
    return this->field_5_.get ();
  }

  hero_t::field_5_type& hero_t::
  field_5 ()
  {
    return this->field_5_.get ();
  }

  void hero_t::
  field_5 (const field_5_type& x)
  {
    this->field_5_.set (x);
  }

  const hero_t::field_6_type& hero_t::
  field_6 () const
  {
    return this->field_6_.get ();
  }

  hero_t::field_6_type& hero_t::
  field_6 ()
  {
    return this->field_6_.get ();
  }

  void hero_t::
  field_6 (const field_6_type& x)
  {
    this->field_6_.set (x);
  }

  const hero_t::field_7_type& hero_t::
  field_7 () const
  {
    return this->field_7_.get ();
  }

  hero_t::field_7_type& hero_t::
  field_7 ()
  {
    return this->field_7_.get ();
  }

  void hero_t::
  field_7 (const field_7_type& x)
  {
    this->field_7_.set (x);
  }

  const hero_t::field_8_type& hero_t::
  field_8 () const
  {
    return this->field_8_.get ();
  }

  hero_t::field_8_type& hero_t::
  field_8 ()
  {
    return this->field_8_.get ();
  }

  void hero_t::
  field_8 (const field_8_type& x)
  {
    this->field_8_.set (x);
  }

  const hero_t::field_9_type& hero_t::
  field_9 () const
  {
    return this->field_9_.get ();
  }

  hero_t::field_9_type& hero_t::
  field_9 ()
  {
    return this->field_9_.get ();
  }

  void hero_t::
  field_9 (const field_9_type& x)
  {
    this->field_9_.set (x);
  }

  const hero_t::name_type& hero_t::
  name () const
  {
    return this->name_.get ();
  }

  hero_t::name_type& hero_t::
  name ()
  {
    return this->name_.get ();
  }

  void hero_t::
  name (const name_type& x)
  {
    this->name_.set (x);
  }

  void hero_t::
  name (::std::auto_ptr< name_type > x)
  {
    this->name_.set (x);
  }

  const hero_t::factionID_type& hero_t::
  factionID () const
  {
    return this->factionID_.get ();
  }

  hero_t::factionID_type& hero_t::
  factionID ()
  {
    return this->factionID_.get ();
  }

  void hero_t::
  factionID (const factionID_type& x)
  {
    this->factionID_.set (x);
  }

  const hero_t::heroID_type& hero_t::
  heroID () const
  {
    return this->heroID_.get ();
  }

  hero_t::heroID_type& hero_t::
  heroID ()
  {
    return this->heroID_.get ();
  }

  void hero_t::
  heroID (const heroID_type& x)
  {
    this->heroID_.set (x);
  }

  const hero_t::x_type& hero_t::
  x () const
  {
    return this->x_.get ();
  }

  hero_t::x_type& hero_t::
  x ()
  {
    return this->x_.get ();
  }

  void hero_t::
  x (const x_type& x)
  {
    this->x_.set (x);
  }

  const hero_t::y_type& hero_t::
  y () const
  {
    return this->y_.get ();
  }

  hero_t::y_type& hero_t::
  y ()
  {
    return this->y_.get ();
  }

  void hero_t::
  y (const y_type& x)
  {
    this->y_.set (x);
  }

  const hero_t::field_21_type& hero_t::
  field_21 () const
  {
    return this->field_21_.get ();
  }

  hero_t::field_21_type& hero_t::
  field_21 ()
  {
    return this->field_21_.get ();
  }

  void hero_t::
  field_21 (const field_21_type& x)
  {
    this->field_21_.set (x);
  }

  const hero_t::field_23_type& hero_t::
  field_23 () const
  {
    return this->field_23_.get ();
  }

  hero_t::field_23_type& hero_t::
  field_23 ()
  {
    return this->field_23_.get ();
  }

  void hero_t::
  field_23 (const field_23_type& x)
  {
    this->field_23_.set (x);
  }

  const hero_t::field_25_type& hero_t::
  field_25 () const
  {
    return this->field_25_.get ();
  }

  hero_t::field_25_type& hero_t::
  field_25 ()
  {
    return this->field_25_.get ();
  }

  void hero_t::
  field_25 (const field_25_type& x)
  {
    this->field_25_.set (x);
  }

  const hero_t::field_27_type& hero_t::
  field_27 () const
  {
    return this->field_27_.get ();
  }

  hero_t::field_27_type& hero_t::
  field_27 ()
  {
    return this->field_27_.get ();
  }

  void hero_t::
  field_27 (const field_27_type& x)
  {
    this->field_27_.set (x);
  }

  const hero_t::field_29_type& hero_t::
  field_29 () const
  {
    return this->field_29_.get ();
  }

  hero_t::field_29_type& hero_t::
  field_29 ()
  {
    return this->field_29_.get ();
  }

  void hero_t::
  field_29 (const field_29_type& x)
  {
    this->field_29_.set (x);
  }

  const hero_t::field_2B_type& hero_t::
  field_2B () const
  {
    return this->field_2B_.get ();
  }

  hero_t::field_2B_type& hero_t::
  field_2B ()
  {
    return this->field_2B_.get ();
  }

  void hero_t::
  field_2B (const field_2B_type& x)
  {
    this->field_2B_.set (x);
  }

  const hero_t::occupiedObjType_type& hero_t::
  occupiedObjType () const
  {
    return this->occupiedObjType_.get ();
  }

  hero_t::occupiedObjType_type& hero_t::
  occupiedObjType ()
  {
    return this->occupiedObjType_.get ();
  }

  void hero_t::
  occupiedObjType (const occupiedObjType_type& x)
  {
    this->occupiedObjType_.set (x);
  }

  const hero_t::occupiedObjVal_type& hero_t::
  occupiedObjVal () const
  {
    return this->occupiedObjVal_.get ();
  }

  hero_t::occupiedObjVal_type& hero_t::
  occupiedObjVal ()
  {
    return this->occupiedObjVal_.get ();
  }

  void hero_t::
  occupiedObjVal (const occupiedObjVal_type& x)
  {
    this->occupiedObjVal_.set (x);
  }

  const hero_t::mobility_type& hero_t::
  mobility () const
  {
    return this->mobility_.get ();
  }

  hero_t::mobility_type& hero_t::
  mobility ()
  {
    return this->mobility_.get ();
  }

  void hero_t::
  mobility (const mobility_type& x)
  {
    this->mobility_.set (x);
  }

  const hero_t::remainingMobility_type& hero_t::
  remainingMobility () const
  {
    return this->remainingMobility_.get ();
  }

  hero_t::remainingMobility_type& hero_t::
  remainingMobility ()
  {
    return this->remainingMobility_.get ();
  }

  void hero_t::
  remainingMobility (const remainingMobility_type& x)
  {
    this->remainingMobility_.set (x);
  }

  const hero_t::experience_type& hero_t::
  experience () const
  {
    return this->experience_.get ();
  }

  hero_t::experience_type& hero_t::
  experience ()
  {
    return this->experience_.get ();
  }

  void hero_t::
  experience (const experience_type& x)
  {
    this->experience_.set (x);
  }

  const hero_t::oldLevel_type& hero_t::
  oldLevel () const
  {
    return this->oldLevel_.get ();
  }

  hero_t::oldLevel_type& hero_t::
  oldLevel ()
  {
    return this->oldLevel_.get ();
  }

  void hero_t::
  oldLevel (const oldLevel_type& x)
  {
    this->oldLevel_.set (x);
  }

  const hero_t::attack_type& hero_t::
  attack () const
  {
    return this->attack_.get ();
  }

  hero_t::attack_type& hero_t::
  attack ()
  {
    return this->attack_.get ();
  }

  void hero_t::
  attack (const attack_type& x)
  {
    this->attack_.set (x);
  }

  const hero_t::defense_type& hero_t::
  defense () const
  {
    return this->defense_.get ();
  }

  hero_t::defense_type& hero_t::
  defense ()
  {
    return this->defense_.get ();
  }

  void hero_t::
  defense (const defense_type& x)
  {
    this->defense_.set (x);
  }

  const hero_t::spellpower_type& hero_t::
  spellpower () const
  {
    return this->spellpower_.get ();
  }

  hero_t::spellpower_type& hero_t::
  spellpower ()
  {
    return this->spellpower_.get ();
  }

  void hero_t::
  spellpower (const spellpower_type& x)
  {
    this->spellpower_.set (x);
  }

  const hero_t::knowledge_type& hero_t::
  knowledge () const
  {
    return this->knowledge_.get ();
  }

  hero_t::knowledge_type& hero_t::
  knowledge ()
  {
    return this->knowledge_.get ();
  }

  void hero_t::
  knowledge (const knowledge_type& x)
  {
    this->knowledge_.set (x);
  }

  const hero_t::field_43_type& hero_t::
  field_43 () const
  {
    return this->field_43_.get ();
  }

  hero_t::field_43_type& hero_t::
  field_43 ()
  {
    return this->field_43_.get ();
  }

  void hero_t::
  field_43 (const field_43_type& x)
  {
    this->field_43_.set (x);
  }

  const hero_t::tempMoraleBonuses_type& hero_t::
  tempMoraleBonuses () const
  {
    return this->tempMoraleBonuses_.get ();
  }

  hero_t::tempMoraleBonuses_type& hero_t::
  tempMoraleBonuses ()
  {
    return this->tempMoraleBonuses_.get ();
  }

  void hero_t::
  tempMoraleBonuses (const tempMoraleBonuses_type& x)
  {
    this->tempMoraleBonuses_.set (x);
  }

  const hero_t::tempLuckBonuses_type& hero_t::
  tempLuckBonuses () const
  {
    return this->tempLuckBonuses_.get ();
  }

  hero_t::tempLuckBonuses_type& hero_t::
  tempLuckBonuses ()
  {
    return this->tempLuckBonuses_.get ();
  }

  void hero_t::
  tempLuckBonuses (const tempLuckBonuses_type& x)
  {
    this->tempLuckBonuses_.set (x);
  }

  const hero_t::field_46_type& hero_t::
  field_46 () const
  {
    return this->field_46_.get ();
  }

  hero_t::field_46_type& hero_t::
  field_46 ()
  {
    return this->field_46_.get ();
  }

  void hero_t::
  field_46 (const field_46_type& x)
  {
    this->field_46_.set (x);
  }

  const hero_t::gazeboesVisited_type& hero_t::
  gazeboesVisited () const
  {
    return this->gazeboesVisited_.get ();
  }

  hero_t::gazeboesVisited_type& hero_t::
  gazeboesVisited ()
  {
    return this->gazeboesVisited_.get ();
  }

  void hero_t::
  gazeboesVisited (const gazeboesVisited_type& x)
  {
    this->gazeboesVisited_.set (x);
  }

  const hero_t::fortsVisited_type& hero_t::
  fortsVisited () const
  {
    return this->fortsVisited_.get ();
  }

  hero_t::fortsVisited_type& hero_t::
  fortsVisited ()
  {
    return this->fortsVisited_.get ();
  }

  void hero_t::
  fortsVisited (const fortsVisited_type& x)
  {
    this->fortsVisited_.set (x);
  }

  const hero_t::witchDoctorHutsVisited_type& hero_t::
  witchDoctorHutsVisited () const
  {
    return this->witchDoctorHutsVisited_.get ();
  }

  hero_t::witchDoctorHutsVisited_type& hero_t::
  witchDoctorHutsVisited ()
  {
    return this->witchDoctorHutsVisited_.get ();
  }

  void hero_t::
  witchDoctorHutsVisited (const witchDoctorHutsVisited_type& x)
  {
    this->witchDoctorHutsVisited_.set (x);
  }

  const hero_t::mercenaryCampsVisited_type& hero_t::
  mercenaryCampsVisited () const
  {
    return this->mercenaryCampsVisited_.get ();
  }

  hero_t::mercenaryCampsVisited_type& hero_t::
  mercenaryCampsVisited ()
  {
    return this->mercenaryCampsVisited_.get ();
  }

  void hero_t::
  mercenaryCampsVisited (const mercenaryCampsVisited_type& x)
  {
    this->mercenaryCampsVisited_.set (x);
  }

  const hero_t::standingStonesVisited_type& hero_t::
  standingStonesVisited () const
  {
    return this->standingStonesVisited_.get ();
  }

  hero_t::standingStonesVisited_type& hero_t::
  standingStonesVisited ()
  {
    return this->standingStonesVisited_.get ();
  }

  void hero_t::
  standingStonesVisited (const standingStonesVisited_type& x)
  {
    this->standingStonesVisited_.set (x);
  }

  const hero_t::treesOfKnowledgeVisited_type& hero_t::
  treesOfKnowledgeVisited () const
  {
    return this->treesOfKnowledgeVisited_.get ();
  }

  hero_t::treesOfKnowledgeVisited_type& hero_t::
  treesOfKnowledgeVisited ()
  {
    return this->treesOfKnowledgeVisited_.get ();
  }

  void hero_t::
  treesOfKnowledgeVisited (const treesOfKnowledgeVisited_type& x)
  {
    this->treesOfKnowledgeVisited_.set (x);
  }

  const hero_t::xanadusVisited_type& hero_t::
  xanadusVisited () const
  {
    return this->xanadusVisited_.get ();
  }

  hero_t::xanadusVisited_type& hero_t::
  xanadusVisited ()
  {
    return this->xanadusVisited_.get ();
  }

  void hero_t::
  xanadusVisited (const xanadusVisited_type& x)
  {
    this->xanadusVisited_.set (x);
  }

  const hero_t::randomSeed_type& hero_t::
  randomSeed () const
  {
    return this->randomSeed_.get ();
  }

  hero_t::randomSeed_type& hero_t::
  randomSeed ()
  {
    return this->randomSeed_.get ();
  }

  void hero_t::
  randomSeed (const randomSeed_type& x)
  {
    this->randomSeed_.set (x);
  }

  const hero_t::wisdomLastOffered_type& hero_t::
  wisdomLastOffered () const
  {
    return this->wisdomLastOffered_.get ();
  }

  hero_t::wisdomLastOffered_type& hero_t::
  wisdomLastOffered ()
  {
    return this->wisdomLastOffered_.get ();
  }

  void hero_t::
  wisdomLastOffered (const wisdomLastOffered_type& x)
  {
    this->wisdomLastOffered_.set (x);
  }

  const hero_t::army_type& hero_t::
  army () const
  {
    return this->army_.get ();
  }

  hero_t::army_type& hero_t::
  army ()
  {
    return this->army_.get ();
  }

  void hero_t::
  army (const army_type& x)
  {
    this->army_.set (x);
  }

  void hero_t::
  army (::std::auto_ptr< army_type > x)
  {
    this->army_.set (x);
  }

  const hero_t::secondarySkill_sequence& hero_t::
  secondarySkill () const
  {
    return this->secondarySkill_;
  }

  hero_t::secondarySkill_sequence& hero_t::
  secondarySkill ()
  {
    return this->secondarySkill_;
  }

  void hero_t::
  secondarySkill (const secondarySkill_sequence& s)
  {
    this->secondarySkill_ = s;
  }

  const hero_t::spell_sequence& hero_t::
  spell () const
  {
    return this->spell_;
  }

  hero_t::spell_sequence& hero_t::
  spell ()
  {
    return this->spell_;
  }

  void hero_t::
  spell (const spell_sequence& s)
  {
    this->spell_ = s;
  }

  const hero_t::artifact_sequence& hero_t::
  artifact () const
  {
    return this->artifact_;
  }

  hero_t::artifact_sequence& hero_t::
  artifact ()
  {
    return this->artifact_;
  }

  void hero_t::
  artifact (const artifact_sequence& s)
  {
    this->artifact_ = s;
  }

  const hero_t::flags_type& hero_t::
  flags () const
  {
    return this->flags_.get ();
  }

  hero_t::flags_type& hero_t::
  flags ()
  {
    return this->flags_.get ();
  }

  void hero_t::
  flags (const flags_type& x)
  {
    this->flags_.set (x);
  }

  const hero_t::isCaptain_type& hero_t::
  isCaptain () const
  {
    return this->isCaptain_.get ();
  }

  hero_t::isCaptain_type& hero_t::
  isCaptain ()
  {
    return this->isCaptain_.get ();
  }

  void hero_t::
  isCaptain (const isCaptain_type& x)
  {
    this->isCaptain_.set (x);
  }

  const hero_t::field_E8_type& hero_t::
  field_E8 () const
  {
    return this->field_E8_.get ();
  }

  hero_t::field_E8_type& hero_t::
  field_E8 ()
  {
    return this->field_E8_.get ();
  }

  void hero_t::
  field_E8 (const field_E8_type& x)
  {
    this->field_E8_.set (x);
  }


  // mapVariable_t
  // 

  const mapVariable_t::id_optional& mapVariable_t::
  id () const
  {
    return this->id_;
  }

  mapVariable_t::id_optional& mapVariable_t::
  id ()
  {
    return this->id_;
  }

  void mapVariable_t::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void mapVariable_t::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  void mapVariable_t::
  id (::std::auto_ptr< id_type > x)
  {
    this->id_.set (x);
  }

  const mapVariable_t::value_optional& mapVariable_t::
  value () const
  {
    return this->value_;
  }

  mapVariable_t::value_optional& mapVariable_t::
  value ()
  {
    return this->value_;
  }

  void mapVariable_t::
  value (const value_type& x)
  {
    this->value_.set (x);
  }

  void mapVariable_t::
  value (const value_optional& x)
  {
    this->value_ = x;
  }

  void mapVariable_t::
  value (::std::auto_ptr< value_type > x)
  {
    this->value_.set (x);
  }


  // map_t
  // 

  const map_t::hero_sequence& map_t::
  hero () const
  {
    return this->hero_;
  }

  map_t::hero_sequence& map_t::
  hero ()
  {
    return this->hero_;
  }

  void map_t::
  hero (const hero_sequence& s)
  {
    this->hero_ = s;
  }

  const map_t::mapVariable_sequence& map_t::
  mapVariable () const
  {
    return this->mapVariable_;
  }

  map_t::mapVariable_sequence& map_t::
  mapVariable ()
  {
    return this->mapVariable_;
  }

  void map_t::
  mapVariable (const mapVariable_sequence& s)
  {
    this->mapVariable_ = s;
  }

  const map_t::script_optional& map_t::
  script () const
  {
    return this->script_;
  }

  map_t::script_optional& map_t::
  script ()
  {
    return this->script_;
  }

  void map_t::
  script (const script_type& x)
  {
    this->script_.set (x);
  }

  void map_t::
  script (const script_optional& x)
  {
    this->script_ = x;
  }

  void map_t::
  script (::std::auto_ptr< script_type > x)
  {
    this->script_.set (x);
  }

  const map_t::raw_type& map_t::
  raw () const
  {
    return this->raw_.get ();
  }

  map_t::raw_type& map_t::
  raw ()
  {
    return this->raw_.get ();
  }

  void map_t::
  raw (const raw_type& x)
  {
    this->raw_.set (x);
  }

  void map_t::
  raw (::std::auto_ptr< raw_type > x)
  {
    this->raw_.set (x);
  }


  // secondarySkill
  // 

  const secondarySkill::id_optional& secondarySkill::
  id () const
  {
    return this->id_;
  }

  secondarySkill::id_optional& secondarySkill::
  id ()
  {
    return this->id_;
  }

  void secondarySkill::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  void secondarySkill::
  id (const id_optional& x)
  {
    this->id_ = x;
  }

  const secondarySkill::level_optional& secondarySkill::
  level () const
  {
    return this->level_;
  }

  secondarySkill::level_optional& secondarySkill::
  level ()
  {
    return this->level_;
  }

  void secondarySkill::
  level (const level_type& x)
  {
    this->level_.set (x);
  }

  void secondarySkill::
  level (const level_optional& x)
  {
    this->level_ = x;
  }

  const secondarySkill::idx_optional& secondarySkill::
  idx () const
  {
    return this->idx_;
  }

  secondarySkill::idx_optional& secondarySkill::
  idx ()
  {
    return this->idx_;
  }

  void secondarySkill::
  idx (const idx_type& x)
  {
    this->idx_.set (x);
  }

  void secondarySkill::
  idx (const idx_optional& x)
  {
    this->idx_ = x;
  }


  // artifact
  // 

  const artifact::id_type& artifact::
  id () const
  {
    return this->id_.get ();
  }

  artifact::id_type& artifact::
  id ()
  {
    return this->id_.get ();
  }

  void artifact::
  id (const id_type& x)
  {
    this->id_.set (x);
  }

  const artifact::spell_type& artifact::
  spell () const
  {
    return this->spell_.get ();
  }

  artifact::spell_type& artifact::
  spell ()
  {
    return this->spell_.get ();
  }

  void artifact::
  spell (const spell_type& x)
  {
    this->spell_.set (x);
  }

  artifact::spell_type artifact::
  spell_default_value ()
  {
    return spell_type (-1);
  }
}

#include <xsd/cxx/xml/dom/parsing-source.hxx>

namespace ironfist_map
{
  // slot_t
  //

  slot_t::
  slot_t ()
  : ::xml_schema::type (),
    id_ (::xml_schema::flags (), this),
    quantity_ (::xml_schema::flags (), this)
  {
  }

  slot_t::
  slot_t (const slot_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    quantity_ (x.quantity_, f, this)
  {
  }

  slot_t::
  slot_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    quantity_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void slot_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "quantity" && n.namespace_ ().empty ())
      {
        this->quantity_.set (quantity_traits::create (i, f, this));
        continue;
      }
    }
  }

  slot_t* slot_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class slot_t (*this, f, c);
  }

  slot_t::
  ~slot_t ()
  {
  }

  // army_t
  //

  army_t::
  army_t ()
  : ::xml_schema::type (),
    slot_ (::xml_schema::flags (), this)
  {
  }

  army_t::
  army_t (const army_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    slot_ (x.slot_, f, this)
  {
  }

  army_t::
  army_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    slot_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void army_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // slot
      //
      if (n.name () == "slot" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< slot_type > r (
          slot_traits::create (i, f, this));

        this->slot_.push_back (r);
        continue;
      }

      break;
    }
  }

  army_t* army_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class army_t (*this, f, c);
  }

  army_t::
  ~army_t ()
  {
  }

  // hero_t
  //

  hero_t::
  hero_t (const spellpoints_type& spellpoints,
          const idx_type& idx,
          const ownerIdx_type& ownerIdx,
          const field_4_type& field_4,
          const field_5_type& field_5,
          const field_6_type& field_6,
          const field_7_type& field_7,
          const field_8_type& field_8,
          const field_9_type& field_9,
          const name_type& name,
          const factionID_type& factionID,
          const heroID_type& heroID,
          const x_type& x,
          const y_type& y,
          const field_21_type& field_21,
          const field_23_type& field_23,
          const field_25_type& field_25,
          const field_27_type& field_27,
          const field_29_type& field_29,
          const field_2B_type& field_2B,
          const occupiedObjType_type& occupiedObjType,
          const occupiedObjVal_type& occupiedObjVal,
          const mobility_type& mobility,
          const remainingMobility_type& remainingMobility,
          const experience_type& experience,
          const oldLevel_type& oldLevel,
          const attack_type& attack,
          const defense_type& defense,
          const spellpower_type& spellpower,
          const knowledge_type& knowledge,
          const field_43_type& field_43,
          const tempMoraleBonuses_type& tempMoraleBonuses,
          const tempLuckBonuses_type& tempLuckBonuses,
          const field_46_type& field_46,
          const gazeboesVisited_type& gazeboesVisited,
          const fortsVisited_type& fortsVisited,
          const witchDoctorHutsVisited_type& witchDoctorHutsVisited,
          const mercenaryCampsVisited_type& mercenaryCampsVisited,
          const standingStonesVisited_type& standingStonesVisited,
          const treesOfKnowledgeVisited_type& treesOfKnowledgeVisited,
          const xanadusVisited_type& xanadusVisited,
          const randomSeed_type& randomSeed,
          const wisdomLastOffered_type& wisdomLastOffered,
          const army_type& army,
          const flags_type& flags,
          const isCaptain_type& isCaptain,
          const field_E8_type& field_E8)
  : ::xml_schema::type (),
    spellpoints_ (spellpoints, ::xml_schema::flags (), this),
    idx_ (idx, ::xml_schema::flags (), this),
    ownerIdx_ (ownerIdx, ::xml_schema::flags (), this),
    field_4_ (field_4, ::xml_schema::flags (), this),
    field_5_ (field_5, ::xml_schema::flags (), this),
    field_6_ (field_6, ::xml_schema::flags (), this),
    field_7_ (field_7, ::xml_schema::flags (), this),
    field_8_ (field_8, ::xml_schema::flags (), this),
    field_9_ (field_9, ::xml_schema::flags (), this),
    name_ (name, ::xml_schema::flags (), this),
    factionID_ (factionID, ::xml_schema::flags (), this),
    heroID_ (heroID, ::xml_schema::flags (), this),
    x_ (x, ::xml_schema::flags (), this),
    y_ (y, ::xml_schema::flags (), this),
    field_21_ (field_21, ::xml_schema::flags (), this),
    field_23_ (field_23, ::xml_schema::flags (), this),
    field_25_ (field_25, ::xml_schema::flags (), this),
    field_27_ (field_27, ::xml_schema::flags (), this),
    field_29_ (field_29, ::xml_schema::flags (), this),
    field_2B_ (field_2B, ::xml_schema::flags (), this),
    occupiedObjType_ (occupiedObjType, ::xml_schema::flags (), this),
    occupiedObjVal_ (occupiedObjVal, ::xml_schema::flags (), this),
    mobility_ (mobility, ::xml_schema::flags (), this),
    remainingMobility_ (remainingMobility, ::xml_schema::flags (), this),
    experience_ (experience, ::xml_schema::flags (), this),
    oldLevel_ (oldLevel, ::xml_schema::flags (), this),
    attack_ (attack, ::xml_schema::flags (), this),
    defense_ (defense, ::xml_schema::flags (), this),
    spellpower_ (spellpower, ::xml_schema::flags (), this),
    knowledge_ (knowledge, ::xml_schema::flags (), this),
    field_43_ (field_43, ::xml_schema::flags (), this),
    tempMoraleBonuses_ (tempMoraleBonuses, ::xml_schema::flags (), this),
    tempLuckBonuses_ (tempLuckBonuses, ::xml_schema::flags (), this),
    field_46_ (field_46, ::xml_schema::flags (), this),
    gazeboesVisited_ (gazeboesVisited, ::xml_schema::flags (), this),
    fortsVisited_ (fortsVisited, ::xml_schema::flags (), this),
    witchDoctorHutsVisited_ (witchDoctorHutsVisited, ::xml_schema::flags (), this),
    mercenaryCampsVisited_ (mercenaryCampsVisited, ::xml_schema::flags (), this),
    standingStonesVisited_ (standingStonesVisited, ::xml_schema::flags (), this),
    treesOfKnowledgeVisited_ (treesOfKnowledgeVisited, ::xml_schema::flags (), this),
    xanadusVisited_ (xanadusVisited, ::xml_schema::flags (), this),
    randomSeed_ (randomSeed, ::xml_schema::flags (), this),
    wisdomLastOffered_ (wisdomLastOffered, ::xml_schema::flags (), this),
    army_ (army, ::xml_schema::flags (), this),
    secondarySkill_ (::xml_schema::flags (), this),
    spell_ (::xml_schema::flags (), this),
    artifact_ (::xml_schema::flags (), this),
    flags_ (flags, ::xml_schema::flags (), this),
    isCaptain_ (isCaptain, ::xml_schema::flags (), this),
    field_E8_ (field_E8, ::xml_schema::flags (), this)
  {
  }

  hero_t::
  hero_t (const spellpoints_type& spellpoints,
          const idx_type& idx,
          const ownerIdx_type& ownerIdx,
          const field_4_type& field_4,
          const field_5_type& field_5,
          const field_6_type& field_6,
          const field_7_type& field_7,
          const field_8_type& field_8,
          const field_9_type& field_9,
          const name_type& name,
          const factionID_type& factionID,
          const heroID_type& heroID,
          const x_type& x,
          const y_type& y,
          const field_21_type& field_21,
          const field_23_type& field_23,
          const field_25_type& field_25,
          const field_27_type& field_27,
          const field_29_type& field_29,
          const field_2B_type& field_2B,
          const occupiedObjType_type& occupiedObjType,
          const occupiedObjVal_type& occupiedObjVal,
          const mobility_type& mobility,
          const remainingMobility_type& remainingMobility,
          const experience_type& experience,
          const oldLevel_type& oldLevel,
          const attack_type& attack,
          const defense_type& defense,
          const spellpower_type& spellpower,
          const knowledge_type& knowledge,
          const field_43_type& field_43,
          const tempMoraleBonuses_type& tempMoraleBonuses,
          const tempLuckBonuses_type& tempLuckBonuses,
          const field_46_type& field_46,
          const gazeboesVisited_type& gazeboesVisited,
          const fortsVisited_type& fortsVisited,
          const witchDoctorHutsVisited_type& witchDoctorHutsVisited,
          const mercenaryCampsVisited_type& mercenaryCampsVisited,
          const standingStonesVisited_type& standingStonesVisited,
          const treesOfKnowledgeVisited_type& treesOfKnowledgeVisited,
          const xanadusVisited_type& xanadusVisited,
          const randomSeed_type& randomSeed,
          const wisdomLastOffered_type& wisdomLastOffered,
          ::std::auto_ptr< army_type >& army,
          const flags_type& flags,
          const isCaptain_type& isCaptain,
          const field_E8_type& field_E8)
  : ::xml_schema::type (),
    spellpoints_ (spellpoints, ::xml_schema::flags (), this),
    idx_ (idx, ::xml_schema::flags (), this),
    ownerIdx_ (ownerIdx, ::xml_schema::flags (), this),
    field_4_ (field_4, ::xml_schema::flags (), this),
    field_5_ (field_5, ::xml_schema::flags (), this),
    field_6_ (field_6, ::xml_schema::flags (), this),
    field_7_ (field_7, ::xml_schema::flags (), this),
    field_8_ (field_8, ::xml_schema::flags (), this),
    field_9_ (field_9, ::xml_schema::flags (), this),
    name_ (name, ::xml_schema::flags (), this),
    factionID_ (factionID, ::xml_schema::flags (), this),
    heroID_ (heroID, ::xml_schema::flags (), this),
    x_ (x, ::xml_schema::flags (), this),
    y_ (y, ::xml_schema::flags (), this),
    field_21_ (field_21, ::xml_schema::flags (), this),
    field_23_ (field_23, ::xml_schema::flags (), this),
    field_25_ (field_25, ::xml_schema::flags (), this),
    field_27_ (field_27, ::xml_schema::flags (), this),
    field_29_ (field_29, ::xml_schema::flags (), this),
    field_2B_ (field_2B, ::xml_schema::flags (), this),
    occupiedObjType_ (occupiedObjType, ::xml_schema::flags (), this),
    occupiedObjVal_ (occupiedObjVal, ::xml_schema::flags (), this),
    mobility_ (mobility, ::xml_schema::flags (), this),
    remainingMobility_ (remainingMobility, ::xml_schema::flags (), this),
    experience_ (experience, ::xml_schema::flags (), this),
    oldLevel_ (oldLevel, ::xml_schema::flags (), this),
    attack_ (attack, ::xml_schema::flags (), this),
    defense_ (defense, ::xml_schema::flags (), this),
    spellpower_ (spellpower, ::xml_schema::flags (), this),
    knowledge_ (knowledge, ::xml_schema::flags (), this),
    field_43_ (field_43, ::xml_schema::flags (), this),
    tempMoraleBonuses_ (tempMoraleBonuses, ::xml_schema::flags (), this),
    tempLuckBonuses_ (tempLuckBonuses, ::xml_schema::flags (), this),
    field_46_ (field_46, ::xml_schema::flags (), this),
    gazeboesVisited_ (gazeboesVisited, ::xml_schema::flags (), this),
    fortsVisited_ (fortsVisited, ::xml_schema::flags (), this),
    witchDoctorHutsVisited_ (witchDoctorHutsVisited, ::xml_schema::flags (), this),
    mercenaryCampsVisited_ (mercenaryCampsVisited, ::xml_schema::flags (), this),
    standingStonesVisited_ (standingStonesVisited, ::xml_schema::flags (), this),
    treesOfKnowledgeVisited_ (treesOfKnowledgeVisited, ::xml_schema::flags (), this),
    xanadusVisited_ (xanadusVisited, ::xml_schema::flags (), this),
    randomSeed_ (randomSeed, ::xml_schema::flags (), this),
    wisdomLastOffered_ (wisdomLastOffered, ::xml_schema::flags (), this),
    army_ (army, ::xml_schema::flags (), this),
    secondarySkill_ (::xml_schema::flags (), this),
    spell_ (::xml_schema::flags (), this),
    artifact_ (::xml_schema::flags (), this),
    flags_ (flags, ::xml_schema::flags (), this),
    isCaptain_ (isCaptain, ::xml_schema::flags (), this),
    field_E8_ (field_E8, ::xml_schema::flags (), this)
  {
  }

  hero_t::
  hero_t (const hero_t& x,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    spellpoints_ (x.spellpoints_, f, this),
    idx_ (x.idx_, f, this),
    ownerIdx_ (x.ownerIdx_, f, this),
    field_4_ (x.field_4_, f, this),
    field_5_ (x.field_5_, f, this),
    field_6_ (x.field_6_, f, this),
    field_7_ (x.field_7_, f, this),
    field_8_ (x.field_8_, f, this),
    field_9_ (x.field_9_, f, this),
    name_ (x.name_, f, this),
    factionID_ (x.factionID_, f, this),
    heroID_ (x.heroID_, f, this),
    x_ (x.x_, f, this),
    y_ (x.y_, f, this),
    field_21_ (x.field_21_, f, this),
    field_23_ (x.field_23_, f, this),
    field_25_ (x.field_25_, f, this),
    field_27_ (x.field_27_, f, this),
    field_29_ (x.field_29_, f, this),
    field_2B_ (x.field_2B_, f, this),
    occupiedObjType_ (x.occupiedObjType_, f, this),
    occupiedObjVal_ (x.occupiedObjVal_, f, this),
    mobility_ (x.mobility_, f, this),
    remainingMobility_ (x.remainingMobility_, f, this),
    experience_ (x.experience_, f, this),
    oldLevel_ (x.oldLevel_, f, this),
    attack_ (x.attack_, f, this),
    defense_ (x.defense_, f, this),
    spellpower_ (x.spellpower_, f, this),
    knowledge_ (x.knowledge_, f, this),
    field_43_ (x.field_43_, f, this),
    tempMoraleBonuses_ (x.tempMoraleBonuses_, f, this),
    tempLuckBonuses_ (x.tempLuckBonuses_, f, this),
    field_46_ (x.field_46_, f, this),
    gazeboesVisited_ (x.gazeboesVisited_, f, this),
    fortsVisited_ (x.fortsVisited_, f, this),
    witchDoctorHutsVisited_ (x.witchDoctorHutsVisited_, f, this),
    mercenaryCampsVisited_ (x.mercenaryCampsVisited_, f, this),
    standingStonesVisited_ (x.standingStonesVisited_, f, this),
    treesOfKnowledgeVisited_ (x.treesOfKnowledgeVisited_, f, this),
    xanadusVisited_ (x.xanadusVisited_, f, this),
    randomSeed_ (x.randomSeed_, f, this),
    wisdomLastOffered_ (x.wisdomLastOffered_, f, this),
    army_ (x.army_, f, this),
    secondarySkill_ (x.secondarySkill_, f, this),
    spell_ (x.spell_, f, this),
    artifact_ (x.artifact_, f, this),
    flags_ (x.flags_, f, this),
    isCaptain_ (x.isCaptain_, f, this),
    field_E8_ (x.field_E8_, f, this)
  {
  }

  hero_t::
  hero_t (const ::xercesc::DOMElement& e,
          ::xml_schema::flags f,
          ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    spellpoints_ (f, this),
    idx_ (f, this),
    ownerIdx_ (f, this),
    field_4_ (f, this),
    field_5_ (f, this),
    field_6_ (f, this),
    field_7_ (f, this),
    field_8_ (f, this),
    field_9_ (f, this),
    name_ (f, this),
    factionID_ (f, this),
    heroID_ (f, this),
    x_ (f, this),
    y_ (f, this),
    field_21_ (f, this),
    field_23_ (f, this),
    field_25_ (f, this),
    field_27_ (f, this),
    field_29_ (f, this),
    field_2B_ (f, this),
    occupiedObjType_ (f, this),
    occupiedObjVal_ (f, this),
    mobility_ (f, this),
    remainingMobility_ (f, this),
    experience_ (f, this),
    oldLevel_ (f, this),
    attack_ (f, this),
    defense_ (f, this),
    spellpower_ (f, this),
    knowledge_ (f, this),
    field_43_ (f, this),
    tempMoraleBonuses_ (f, this),
    tempLuckBonuses_ (f, this),
    field_46_ (f, this),
    gazeboesVisited_ (f, this),
    fortsVisited_ (f, this),
    witchDoctorHutsVisited_ (f, this),
    mercenaryCampsVisited_ (f, this),
    standingStonesVisited_ (f, this),
    treesOfKnowledgeVisited_ (f, this),
    xanadusVisited_ (f, this),
    randomSeed_ (f, this),
    wisdomLastOffered_ (f, this),
    army_ (f, this),
    secondarySkill_ (f, this),
    spell_ (f, this),
    artifact_ (f, this),
    flags_ (f, this),
    isCaptain_ (f, this),
    field_E8_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void hero_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // spellpoints
      //
      if (n.name () == "spellpoints" && n.namespace_ ().empty ())
      {
        if (!spellpoints_.present ())
        {
          this->spellpoints_.set (spellpoints_traits::create (i, f, this));
          continue;
        }
      }

      // idx
      //
      if (n.name () == "idx" && n.namespace_ ().empty ())
      {
        if (!idx_.present ())
        {
          this->idx_.set (idx_traits::create (i, f, this));
          continue;
        }
      }

      // ownerIdx
      //
      if (n.name () == "ownerIdx" && n.namespace_ ().empty ())
      {
        if (!ownerIdx_.present ())
        {
          this->ownerIdx_.set (ownerIdx_traits::create (i, f, this));
          continue;
        }
      }

      // field_4
      //
      if (n.name () == "field_4" && n.namespace_ ().empty ())
      {
        if (!field_4_.present ())
        {
          this->field_4_.set (field_4_traits::create (i, f, this));
          continue;
        }
      }

      // field_5
      //
      if (n.name () == "field_5" && n.namespace_ ().empty ())
      {
        if (!field_5_.present ())
        {
          this->field_5_.set (field_5_traits::create (i, f, this));
          continue;
        }
      }

      // field_6
      //
      if (n.name () == "field_6" && n.namespace_ ().empty ())
      {
        if (!field_6_.present ())
        {
          this->field_6_.set (field_6_traits::create (i, f, this));
          continue;
        }
      }

      // field_7
      //
      if (n.name () == "field_7" && n.namespace_ ().empty ())
      {
        if (!field_7_.present ())
        {
          this->field_7_.set (field_7_traits::create (i, f, this));
          continue;
        }
      }

      // field_8
      //
      if (n.name () == "field_8" && n.namespace_ ().empty ())
      {
        if (!field_8_.present ())
        {
          this->field_8_.set (field_8_traits::create (i, f, this));
          continue;
        }
      }

      // field_9
      //
      if (n.name () == "field_9" && n.namespace_ ().empty ())
      {
        if (!field_9_.present ())
        {
          this->field_9_.set (field_9_traits::create (i, f, this));
          continue;
        }
      }

      // name
      //
      if (n.name () == "name" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< name_type > r (
          name_traits::create (i, f, this));

        if (!name_.present ())
        {
          this->name_.set (r);
          continue;
        }
      }

      // factionID
      //
      if (n.name () == "factionID" && n.namespace_ ().empty ())
      {
        if (!factionID_.present ())
        {
          this->factionID_.set (factionID_traits::create (i, f, this));
          continue;
        }
      }

      // heroID
      //
      if (n.name () == "heroID" && n.namespace_ ().empty ())
      {
        if (!heroID_.present ())
        {
          this->heroID_.set (heroID_traits::create (i, f, this));
          continue;
        }
      }

      // x
      //
      if (n.name () == "x" && n.namespace_ ().empty ())
      {
        if (!x_.present ())
        {
          this->x_.set (x_traits::create (i, f, this));
          continue;
        }
      }

      // y
      //
      if (n.name () == "y" && n.namespace_ ().empty ())
      {
        if (!y_.present ())
        {
          this->y_.set (y_traits::create (i, f, this));
          continue;
        }
      }

      // field_21
      //
      if (n.name () == "field_21" && n.namespace_ ().empty ())
      {
        if (!field_21_.present ())
        {
          this->field_21_.set (field_21_traits::create (i, f, this));
          continue;
        }
      }

      // field_23
      //
      if (n.name () == "field_23" && n.namespace_ ().empty ())
      {
        if (!field_23_.present ())
        {
          this->field_23_.set (field_23_traits::create (i, f, this));
          continue;
        }
      }

      // field_25
      //
      if (n.name () == "field_25" && n.namespace_ ().empty ())
      {
        if (!field_25_.present ())
        {
          this->field_25_.set (field_25_traits::create (i, f, this));
          continue;
        }
      }

      // field_27
      //
      if (n.name () == "field_27" && n.namespace_ ().empty ())
      {
        if (!field_27_.present ())
        {
          this->field_27_.set (field_27_traits::create (i, f, this));
          continue;
        }
      }

      // field_29
      //
      if (n.name () == "field_29" && n.namespace_ ().empty ())
      {
        if (!field_29_.present ())
        {
          this->field_29_.set (field_29_traits::create (i, f, this));
          continue;
        }
      }

      // field_2B
      //
      if (n.name () == "field_2B" && n.namespace_ ().empty ())
      {
        if (!field_2B_.present ())
        {
          this->field_2B_.set (field_2B_traits::create (i, f, this));
          continue;
        }
      }

      // occupiedObjType
      //
      if (n.name () == "occupiedObjType" && n.namespace_ ().empty ())
      {
        if (!occupiedObjType_.present ())
        {
          this->occupiedObjType_.set (occupiedObjType_traits::create (i, f, this));
          continue;
        }
      }

      // occupiedObjVal
      //
      if (n.name () == "occupiedObjVal" && n.namespace_ ().empty ())
      {
        if (!occupiedObjVal_.present ())
        {
          this->occupiedObjVal_.set (occupiedObjVal_traits::create (i, f, this));
          continue;
        }
      }

      // mobility
      //
      if (n.name () == "mobility" && n.namespace_ ().empty ())
      {
        if (!mobility_.present ())
        {
          this->mobility_.set (mobility_traits::create (i, f, this));
          continue;
        }
      }

      // remainingMobility
      //
      if (n.name () == "remainingMobility" && n.namespace_ ().empty ())
      {
        if (!remainingMobility_.present ())
        {
          this->remainingMobility_.set (remainingMobility_traits::create (i, f, this));
          continue;
        }
      }

      // experience
      //
      if (n.name () == "experience" && n.namespace_ ().empty ())
      {
        if (!experience_.present ())
        {
          this->experience_.set (experience_traits::create (i, f, this));
          continue;
        }
      }

      // oldLevel
      //
      if (n.name () == "oldLevel" && n.namespace_ ().empty ())
      {
        if (!oldLevel_.present ())
        {
          this->oldLevel_.set (oldLevel_traits::create (i, f, this));
          continue;
        }
      }

      // attack
      //
      if (n.name () == "attack" && n.namespace_ ().empty ())
      {
        if (!attack_.present ())
        {
          this->attack_.set (attack_traits::create (i, f, this));
          continue;
        }
      }

      // defense
      //
      if (n.name () == "defense" && n.namespace_ ().empty ())
      {
        if (!defense_.present ())
        {
          this->defense_.set (defense_traits::create (i, f, this));
          continue;
        }
      }

      // spellpower
      //
      if (n.name () == "spellpower" && n.namespace_ ().empty ())
      {
        if (!spellpower_.present ())
        {
          this->spellpower_.set (spellpower_traits::create (i, f, this));
          continue;
        }
      }

      // knowledge
      //
      if (n.name () == "knowledge" && n.namespace_ ().empty ())
      {
        if (!knowledge_.present ())
        {
          this->knowledge_.set (knowledge_traits::create (i, f, this));
          continue;
        }
      }

      // field_43
      //
      if (n.name () == "field_43" && n.namespace_ ().empty ())
      {
        if (!field_43_.present ())
        {
          this->field_43_.set (field_43_traits::create (i, f, this));
          continue;
        }
      }

      // tempMoraleBonuses
      //
      if (n.name () == "tempMoraleBonuses" && n.namespace_ ().empty ())
      {
        if (!tempMoraleBonuses_.present ())
        {
          this->tempMoraleBonuses_.set (tempMoraleBonuses_traits::create (i, f, this));
          continue;
        }
      }

      // tempLuckBonuses
      //
      if (n.name () == "tempLuckBonuses" && n.namespace_ ().empty ())
      {
        if (!tempLuckBonuses_.present ())
        {
          this->tempLuckBonuses_.set (tempLuckBonuses_traits::create (i, f, this));
          continue;
        }
      }

      // field_46
      //
      if (n.name () == "field_46" && n.namespace_ ().empty ())
      {
        if (!field_46_.present ())
        {
          this->field_46_.set (field_46_traits::create (i, f, this));
          continue;
        }
      }

      // gazeboesVisited
      //
      if (n.name () == "gazeboesVisited" && n.namespace_ ().empty ())
      {
        if (!gazeboesVisited_.present ())
        {
          this->gazeboesVisited_.set (gazeboesVisited_traits::create (i, f, this));
          continue;
        }
      }

      // fortsVisited
      //
      if (n.name () == "fortsVisited" && n.namespace_ ().empty ())
      {
        if (!fortsVisited_.present ())
        {
          this->fortsVisited_.set (fortsVisited_traits::create (i, f, this));
          continue;
        }
      }

      // witchDoctorHutsVisited
      //
      if (n.name () == "witchDoctorHutsVisited" && n.namespace_ ().empty ())
      {
        if (!witchDoctorHutsVisited_.present ())
        {
          this->witchDoctorHutsVisited_.set (witchDoctorHutsVisited_traits::create (i, f, this));
          continue;
        }
      }

      // mercenaryCampsVisited
      //
      if (n.name () == "mercenaryCampsVisited" && n.namespace_ ().empty ())
      {
        if (!mercenaryCampsVisited_.present ())
        {
          this->mercenaryCampsVisited_.set (mercenaryCampsVisited_traits::create (i, f, this));
          continue;
        }
      }

      // standingStonesVisited
      //
      if (n.name () == "standingStonesVisited" && n.namespace_ ().empty ())
      {
        if (!standingStonesVisited_.present ())
        {
          this->standingStonesVisited_.set (standingStonesVisited_traits::create (i, f, this));
          continue;
        }
      }

      // treesOfKnowledgeVisited
      //
      if (n.name () == "treesOfKnowledgeVisited" && n.namespace_ ().empty ())
      {
        if (!treesOfKnowledgeVisited_.present ())
        {
          this->treesOfKnowledgeVisited_.set (treesOfKnowledgeVisited_traits::create (i, f, this));
          continue;
        }
      }

      // xanadusVisited
      //
      if (n.name () == "xanadusVisited" && n.namespace_ ().empty ())
      {
        if (!xanadusVisited_.present ())
        {
          this->xanadusVisited_.set (xanadusVisited_traits::create (i, f, this));
          continue;
        }
      }

      // randomSeed
      //
      if (n.name () == "randomSeed" && n.namespace_ ().empty ())
      {
        if (!randomSeed_.present ())
        {
          this->randomSeed_.set (randomSeed_traits::create (i, f, this));
          continue;
        }
      }

      // wisdomLastOffered
      //
      if (n.name () == "wisdomLastOffered" && n.namespace_ ().empty ())
      {
        if (!wisdomLastOffered_.present ())
        {
          this->wisdomLastOffered_.set (wisdomLastOffered_traits::create (i, f, this));
          continue;
        }
      }

      // army
      //
      if (n.name () == "army" && n.namespace_ () == "ironfist_map")
      {
        ::std::auto_ptr< army_type > r (
          army_traits::create (i, f, this));

        if (!army_.present ())
        {
          this->army_.set (r);
          continue;
        }
      }

      // secondarySkill
      //
      if (n.name () == "secondarySkill" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< secondarySkill_type > r (
          secondarySkill_traits::create (i, f, this));

        this->secondarySkill_.push_back (r);
        continue;
      }

      // spell
      //
      if (n.name () == "spell" && n.namespace_ ().empty ())
      {
        this->spell_.push_back (spell_traits::create (i, f, this));
        continue;
      }

      // artifact
      //
      if (n.name () == "artifact" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< artifact_type > r (
          artifact_traits::create (i, f, this));

        this->artifact_.push_back (r);
        continue;
      }

      // flags
      //
      if (n.name () == "flags" && n.namespace_ ().empty ())
      {
        if (!flags_.present ())
        {
          this->flags_.set (flags_traits::create (i, f, this));
          continue;
        }
      }

      // isCaptain
      //
      if (n.name () == "isCaptain" && n.namespace_ ().empty ())
      {
        if (!isCaptain_.present ())
        {
          this->isCaptain_.set (isCaptain_traits::create (i, f, this));
          continue;
        }
      }

      // field_E8
      //
      if (n.name () == "field_E8" && n.namespace_ ().empty ())
      {
        if (!field_E8_.present ())
        {
          this->field_E8_.set (field_E8_traits::create (i, f, this));
          continue;
        }
      }

      break;
    }

    if (!spellpoints_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "spellpoints",
        "");
    }

    if (!idx_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "idx",
        "");
    }

    if (!ownerIdx_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "ownerIdx",
        "");
    }

    if (!field_4_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_4",
        "");
    }

    if (!field_5_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_5",
        "");
    }

    if (!field_6_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_6",
        "");
    }

    if (!field_7_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_7",
        "");
    }

    if (!field_8_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_8",
        "");
    }

    if (!field_9_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_9",
        "");
    }

    if (!name_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "name",
        "");
    }

    if (!factionID_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "factionID",
        "");
    }

    if (!heroID_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "heroID",
        "");
    }

    if (!x_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "x",
        "");
    }

    if (!y_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "y",
        "");
    }

    if (!field_21_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_21",
        "");
    }

    if (!field_23_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_23",
        "");
    }

    if (!field_25_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_25",
        "");
    }

    if (!field_27_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_27",
        "");
    }

    if (!field_29_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_29",
        "");
    }

    if (!field_2B_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_2B",
        "");
    }

    if (!occupiedObjType_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "occupiedObjType",
        "");
    }

    if (!occupiedObjVal_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "occupiedObjVal",
        "");
    }

    if (!mobility_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mobility",
        "");
    }

    if (!remainingMobility_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "remainingMobility",
        "");
    }

    if (!experience_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "experience",
        "");
    }

    if (!oldLevel_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "oldLevel",
        "");
    }

    if (!attack_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "attack",
        "");
    }

    if (!defense_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "defense",
        "");
    }

    if (!spellpower_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "spellpower",
        "");
    }

    if (!knowledge_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "knowledge",
        "");
    }

    if (!field_43_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_43",
        "");
    }

    if (!tempMoraleBonuses_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "tempMoraleBonuses",
        "");
    }

    if (!tempLuckBonuses_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "tempLuckBonuses",
        "");
    }

    if (!field_46_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_46",
        "");
    }

    if (!gazeboesVisited_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "gazeboesVisited",
        "");
    }

    if (!fortsVisited_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "fortsVisited",
        "");
    }

    if (!witchDoctorHutsVisited_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "witchDoctorHutsVisited",
        "");
    }

    if (!mercenaryCampsVisited_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "mercenaryCampsVisited",
        "");
    }

    if (!standingStonesVisited_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "standingStonesVisited",
        "");
    }

    if (!treesOfKnowledgeVisited_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "treesOfKnowledgeVisited",
        "");
    }

    if (!xanadusVisited_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "xanadusVisited",
        "");
    }

    if (!randomSeed_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "randomSeed",
        "");
    }

    if (!wisdomLastOffered_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "wisdomLastOffered",
        "");
    }

    if (!army_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "army",
        "ironfist_map");
    }

    if (!flags_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "flags",
        "");
    }

    if (!isCaptain_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "isCaptain",
        "");
    }

    if (!field_E8_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "field_E8",
        "");
    }
  }

  hero_t* hero_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class hero_t (*this, f, c);
  }

  hero_t::
  ~hero_t ()
  {
  }

  // mapVariable_t
  //

  mapVariable_t::
  mapVariable_t ()
  : ::xml_schema::type (),
    id_ (::xml_schema::flags (), this),
    value_ (::xml_schema::flags (), this)
  {
  }

  mapVariable_t::
  mapVariable_t (const mapVariable_t& x,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    value_ (x.value_, f, this)
  {
  }

  mapVariable_t::
  mapVariable_t (const ::xercesc::DOMElement& e,
                 ::xml_schema::flags f,
                 ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    value_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void mapVariable_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< id_type > r (
          id_traits::create (i, f, this));

        this->id_.set (r);
        continue;
      }

      if (n.name () == "value" && n.namespace_ ().empty ())
      {
        ::std::auto_ptr< value_type > r (
          value_traits::create (i, f, this));

        this->value_.set (r);
        continue;
      }
    }
  }

  mapVariable_t* mapVariable_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class mapVariable_t (*this, f, c);
  }

  mapVariable_t::
  ~mapVariable_t ()
  {
  }

  // map_t
  //

  map_t::
  map_t (const raw_type& raw)
  : ::xml_schema::type (),
    hero_ (::xml_schema::flags (), this),
    mapVariable_ (::xml_schema::flags (), this),
    script_ (::xml_schema::flags (), this),
    raw_ (raw, ::xml_schema::flags (), this)
  {
  }

  map_t::
  map_t (const map_t& x,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    hero_ (x.hero_, f, this),
    mapVariable_ (x.mapVariable_, f, this),
    script_ (x.script_, f, this),
    raw_ (x.raw_, f, this)
  {
  }

  map_t::
  map_t (const ::xercesc::DOMElement& e,
         ::xml_schema::flags f,
         ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    hero_ (f, this),
    mapVariable_ (f, this),
    script_ (f, this),
    raw_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, true, false);
      this->parse (p, f);
    }
  }

  void map_t::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    for (; p.more_elements (); p.next_element ())
    {
      const ::xercesc::DOMElement& i (p.cur_element ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      // hero
      //
      if (n.name () == "hero" && n.namespace_ () == "ironfist_map")
      {
        ::std::auto_ptr< hero_type > r (
          hero_traits::create (i, f, this));

        this->hero_.push_back (r);
        continue;
      }

      // mapVariable
      //
      if (n.name () == "mapVariable" && n.namespace_ () == "ironfist_map")
      {
        ::std::auto_ptr< mapVariable_type > r (
          mapVariable_traits::create (i, f, this));

        this->mapVariable_.push_back (r);
        continue;
      }

      // script
      //
      if (n.name () == "script" && n.namespace_ () == "ironfist_map")
      {
        ::std::auto_ptr< script_type > r (
          script_traits::create (i, f, this));

        if (!this->script_)
        {
          this->script_.set (r);
          continue;
        }
      }

      // raw
      //
      if (n.name () == "raw" && n.namespace_ () == "ironfist_map")
      {
        ::std::auto_ptr< raw_type > r (
          raw_traits::create (i, f, this));

        if (!raw_.present ())
        {
          this->raw_.set (r);
          continue;
        }
      }

      break;
    }

    if (!raw_.present ())
    {
      throw ::xsd::cxx::tree::expected_element< char > (
        "raw",
        "ironfist_map");
    }
  }

  map_t* map_t::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class map_t (*this, f, c);
  }

  map_t::
  ~map_t ()
  {
  }

  // secondarySkill
  //

  secondarySkill::
  secondarySkill ()
  : ::xml_schema::type (),
    id_ (::xml_schema::flags (), this),
    level_ (::xml_schema::flags (), this),
    idx_ (::xml_schema::flags (), this)
  {
  }

  secondarySkill::
  secondarySkill (const secondarySkill& x,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    level_ (x.level_, f, this),
    idx_ (x.idx_, f, this)
  {
  }

  secondarySkill::
  secondarySkill (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f,
                  ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    level_ (f, this),
    idx_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void secondarySkill::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "level" && n.namespace_ ().empty ())
      {
        this->level_.set (level_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "idx" && n.namespace_ ().empty ())
      {
        this->idx_.set (idx_traits::create (i, f, this));
        continue;
      }
    }
  }

  secondarySkill* secondarySkill::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class secondarySkill (*this, f, c);
  }

  secondarySkill::
  ~secondarySkill ()
  {
  }

  // artifact
  //

  artifact::
  artifact (const id_type& id)
  : ::xml_schema::type (),
    id_ (id, ::xml_schema::flags (), this),
    spell_ (spell_default_value (), ::xml_schema::flags (), this)
  {
  }

  artifact::
  artifact (const artifact& x,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (x, f, c),
    id_ (x.id_, f, this),
    spell_ (x.spell_, f, this)
  {
  }

  artifact::
  artifact (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f,
            ::xml_schema::container* c)
  : ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
    id_ (f, this),
    spell_ (f, this)
  {
    if ((f & ::xml_schema::flags::base) == 0)
    {
      ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
      this->parse (p, f);
    }
  }

  void artifact::
  parse (::xsd::cxx::xml::dom::parser< char >& p,
         ::xml_schema::flags f)
  {
    while (p.more_attributes ())
    {
      const ::xercesc::DOMAttr& i (p.next_attribute ());
      const ::xsd::cxx::xml::qualified_name< char > n (
        ::xsd::cxx::xml::dom::name< char > (i));

      if (n.name () == "id" && n.namespace_ ().empty ())
      {
        this->id_.set (id_traits::create (i, f, this));
        continue;
      }

      if (n.name () == "spell" && n.namespace_ ().empty ())
      {
        this->spell_.set (spell_traits::create (i, f, this));
        continue;
      }
    }

    if (!id_.present ())
    {
      throw ::xsd::cxx::tree::expected_attribute< char > (
        "id",
        "");
    }

    if (!spell_.present ())
    {
      this->spell_.set (spell_default_value ());
    }
  }

  artifact* artifact::
  _clone (::xml_schema::flags f,
          ::xml_schema::container* c) const
  {
    return new class artifact (*this, f, c);
  }

  artifact::
  ~artifact ()
  {
  }
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

namespace ironfist_map
{
  ::std::auto_ptr< ::ironfist_map::map_t >
  map (const ::std::string& u,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::map_t > r (
      ::ironfist_map::map (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (const ::std::string& u,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::map_t > r (
      ::ironfist_map::map (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (const ::std::string& u,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::map_t > r (
      ::ironfist_map::map (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::map (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::map (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::map (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::map (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::map (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::std::istream& is,
       const ::std::string& sid,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::map (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::xercesc::InputSource& i,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::map_t > r (
      ::ironfist_map::map (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::xercesc::InputSource& i,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::map_t > r (
      ::ironfist_map::map (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::xercesc::InputSource& i,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::map_t > r (
      ::ironfist_map::map (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::ironfist_map::map_t > r (
        ::ironfist_map::map (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "map" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::map_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::map_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "map",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::map_t >
  map (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "map" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::map_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::map_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "map",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::hero_t > r (
      ::ironfist_map::hero (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::hero_t > r (
      ::ironfist_map::hero (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::hero_t > r (
      ::ironfist_map::hero (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::hero (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::hero (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::hero (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::hero (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::hero (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::hero (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::hero_t > r (
      ::ironfist_map::hero (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::hero_t > r (
      ::ironfist_map::hero (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::hero_t > r (
      ::ironfist_map::hero (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::ironfist_map::hero_t > r (
        ::ironfist_map::hero (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "hero" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::hero_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::hero_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "hero",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::hero_t >
  hero (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "hero" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::hero_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::hero_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "hero",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (const ::std::string& u,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
      ::ironfist_map::mapVariable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (const ::std::string& u,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
      ::ironfist_map::mapVariable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (const ::std::string& u,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
      ::ironfist_map::mapVariable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::mapVariable (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::mapVariable (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::mapVariable (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::mapVariable (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               const ::std::string& sid,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::mapVariable (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::std::istream& is,
               const ::std::string& sid,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::mapVariable (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::xercesc::InputSource& i,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
      ::ironfist_map::mapVariable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::xercesc::InputSource& i,
               ::xml_schema::error_handler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
      ::ironfist_map::mapVariable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::xercesc::InputSource& i,
               ::xercesc::DOMErrorHandler& h,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
      ::ironfist_map::mapVariable (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (const ::xercesc::DOMDocument& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
        ::ironfist_map::mapVariable (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "mapVariable" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::mapVariable_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "mapVariable",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::mapVariable_t >
  mapVariable (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
               ::xml_schema::flags f,
               const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "mapVariable" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::mapVariable_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::mapVariable_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "mapVariable",
      "ironfist_map");
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (const ::std::string& u,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::base64_binary > r (
      ::ironfist_map::raw (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (const ::std::string& u,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::base64_binary > r (
      ::ironfist_map::raw (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (const ::std::string& u,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::base64_binary > r (
      ::ironfist_map::raw (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::raw (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::raw (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::raw (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::raw (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       const ::std::string& sid,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::raw (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::std::istream& is,
       const ::std::string& sid,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::raw (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::xercesc::InputSource& i,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::base64_binary > r (
      ::ironfist_map::raw (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::xercesc::InputSource& i,
       ::xml_schema::error_handler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::base64_binary > r (
      ::ironfist_map::raw (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::xercesc::InputSource& i,
       ::xercesc::DOMErrorHandler& h,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::base64_binary > r (
      ::ironfist_map::raw (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (const ::xercesc::DOMDocument& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::base64_binary > r (
        ::ironfist_map::raw (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "raw" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::xml_schema::base64_binary > r (
        ::xsd::cxx::tree::traits< ::xml_schema::base64_binary, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "raw",
      "ironfist_map");
  }

  ::std::auto_ptr< ::xml_schema::base64_binary >
  raw (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
       ::xml_schema::flags f,
       const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "raw" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::xml_schema::base64_binary > r (
        ::xsd::cxx::tree::traits< ::xml_schema::base64_binary, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "raw",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (const ::std::string& u,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::army_t > r (
      ::ironfist_map::army (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (const ::std::string& u,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::army_t > r (
      ::ironfist_map::army (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (const ::std::string& u,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::army_t > r (
      ::ironfist_map::army (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::army (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::army (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::army (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::army (isrc, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        const ::std::string& sid,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::army (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::std::istream& is,
        const ::std::string& sid,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::army (isrc, h, f, p);
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::xercesc::InputSource& i,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::ironfist_map::army_t > r (
      ::ironfist_map::army (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::xercesc::InputSource& i,
        ::xml_schema::error_handler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::army_t > r (
      ::ironfist_map::army (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::xercesc::InputSource& i,
        ::xercesc::DOMErrorHandler& h,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::ironfist_map::army_t > r (
      ::ironfist_map::army (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::ironfist_map::army_t > r (
        ::ironfist_map::army (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "army" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::army_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::army_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "army",
      "ironfist_map");
  }

  ::std::auto_ptr< ::ironfist_map::army_t >
  army (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f,
        const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "army" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::ironfist_map::army_t > r (
        ::xsd::cxx::tree::traits< ::ironfist_map::army_t, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "army",
      "ironfist_map");
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (const ::std::string& u,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::ironfist_map::script (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (const ::std::string& u,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::ironfist_map::script (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (const ::std::string& u,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        u, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::ironfist_map::script (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::script (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::script (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is);
    return ::ironfist_map::script (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::script (isrc, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          const ::std::string& sid,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0,
      (f & ::xml_schema::flags::keep_dom) == 0);

    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::script (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::std::istream& is,
          const ::std::string& sid,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
    return ::ironfist_map::script (isrc, h, f, p);
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::xercesc::InputSource& i,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xsd::cxx::tree::error_handler< char > h;

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::ironfist_map::script (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::xercesc::InputSource& i,
          ::xml_schema::error_handler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::ironfist_map::script (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::xercesc::InputSource& i,
          ::xercesc::DOMErrorHandler& h,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::parse< char > (
        i, h, p, f));

    if (!d.get ())
      throw ::xsd::cxx::tree::parsing< char > ();

    ::std::auto_ptr< ::xml_schema::string > r (
      ::ironfist_map::script (
        d, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties& p)
  {
    if (f & ::xml_schema::flags::keep_dom)
    {
      ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
        static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

      ::std::auto_ptr< ::xml_schema::string > r (
        ::ironfist_map::script (
          c, f | ::xml_schema::flags::own_dom, p));

      return r;
    }

    const ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "script" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "script",
      "ironfist_map");
  }

  ::std::auto_ptr< ::xml_schema::string >
  script (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f,
          const ::xml_schema::properties&)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      ((f & ::xml_schema::flags::keep_dom) &&
       !(f & ::xml_schema::flags::own_dom))
      ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
      : 0);

    ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
    const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (f & ::xml_schema::flags::keep_dom)
      doc.setUserData (::xml_schema::dom::tree_node_key,
                       (c.get () ? &c : &d),
                       0);

    if (n.name () == "script" &&
        n.namespace_ () == "ironfist_map")
    {
      ::std::auto_ptr< ::xml_schema::string > r (
        ::xsd::cxx::tree::traits< ::xml_schema::string, char >::create (
          e, f, 0));
      return r;
    }

    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "script",
      "ironfist_map");
  }
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

namespace ironfist_map
{
  void
  operator<< (::xercesc::DOMElement& e, const slot_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << *i.id ();
    }

    // quantity
    //
    if (i.quantity ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "quantity",
          e));

      a << *i.quantity ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const army_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // slot
    //
    for (army_t::slot_const_iterator
         b (i.slot ().begin ()), n (i.slot ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "slot",
          e));

      s << *b;
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const hero_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // spellpoints
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "spellpoints",
          e));

      s << i.spellpoints ();
    }

    // idx
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "idx",
          e));

      s << i.idx ();
    }

    // ownerIdx
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "ownerIdx",
          e));

      s << i.ownerIdx ();
    }

    // field_4
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_4",
          e));

      s << i.field_4 ();
    }

    // field_5
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_5",
          e));

      s << i.field_5 ();
    }

    // field_6
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_6",
          e));

      s << i.field_6 ();
    }

    // field_7
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_7",
          e));

      s << i.field_7 ();
    }

    // field_8
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_8",
          e));

      s << i.field_8 ();
    }

    // field_9
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_9",
          e));

      s << i.field_9 ();
    }

    // name
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "name",
          e));

      s << i.name ();
    }

    // factionID
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "factionID",
          e));

      s << i.factionID ();
    }

    // heroID
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "heroID",
          e));

      s << i.heroID ();
    }

    // x
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "x",
          e));

      s << i.x ();
    }

    // y
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "y",
          e));

      s << i.y ();
    }

    // field_21
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_21",
          e));

      s << i.field_21 ();
    }

    // field_23
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_23",
          e));

      s << i.field_23 ();
    }

    // field_25
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_25",
          e));

      s << i.field_25 ();
    }

    // field_27
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_27",
          e));

      s << i.field_27 ();
    }

    // field_29
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_29",
          e));

      s << i.field_29 ();
    }

    // field_2B
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_2B",
          e));

      s << i.field_2B ();
    }

    // occupiedObjType
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "occupiedObjType",
          e));

      s << i.occupiedObjType ();
    }

    // occupiedObjVal
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "occupiedObjVal",
          e));

      s << i.occupiedObjVal ();
    }

    // mobility
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mobility",
          e));

      s << i.mobility ();
    }

    // remainingMobility
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "remainingMobility",
          e));

      s << i.remainingMobility ();
    }

    // experience
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "experience",
          e));

      s << i.experience ();
    }

    // oldLevel
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "oldLevel",
          e));

      s << i.oldLevel ();
    }

    // attack
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "attack",
          e));

      s << i.attack ();
    }

    // defense
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "defense",
          e));

      s << i.defense ();
    }

    // spellpower
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "spellpower",
          e));

      s << i.spellpower ();
    }

    // knowledge
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "knowledge",
          e));

      s << i.knowledge ();
    }

    // field_43
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_43",
          e));

      s << i.field_43 ();
    }

    // tempMoraleBonuses
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "tempMoraleBonuses",
          e));

      s << i.tempMoraleBonuses ();
    }

    // tempLuckBonuses
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "tempLuckBonuses",
          e));

      s << i.tempLuckBonuses ();
    }

    // field_46
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_46",
          e));

      s << i.field_46 ();
    }

    // gazeboesVisited
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "gazeboesVisited",
          e));

      s << i.gazeboesVisited ();
    }

    // fortsVisited
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "fortsVisited",
          e));

      s << i.fortsVisited ();
    }

    // witchDoctorHutsVisited
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "witchDoctorHutsVisited",
          e));

      s << i.witchDoctorHutsVisited ();
    }

    // mercenaryCampsVisited
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mercenaryCampsVisited",
          e));

      s << i.mercenaryCampsVisited ();
    }

    // standingStonesVisited
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "standingStonesVisited",
          e));

      s << i.standingStonesVisited ();
    }

    // treesOfKnowledgeVisited
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "treesOfKnowledgeVisited",
          e));

      s << i.treesOfKnowledgeVisited ();
    }

    // xanadusVisited
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "xanadusVisited",
          e));

      s << i.xanadusVisited ();
    }

    // randomSeed
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "randomSeed",
          e));

      s << i.randomSeed ();
    }

    // wisdomLastOffered
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "wisdomLastOffered",
          e));

      s << i.wisdomLastOffered ();
    }

    // army
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "army",
          "ironfist_map",
          e));

      s << i.army ();
    }

    // secondarySkill
    //
    for (hero_t::secondarySkill_const_iterator
         b (i.secondarySkill ().begin ()), n (i.secondarySkill ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "secondarySkill",
          e));

      s << *b;
    }

    // spell
    //
    for (hero_t::spell_const_iterator
         b (i.spell ().begin ()), n (i.spell ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "spell",
          e));

      s << *b;
    }

    // artifact
    //
    for (hero_t::artifact_const_iterator
         b (i.artifact ().begin ()), n (i.artifact ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "artifact",
          e));

      s << *b;
    }

    // flags
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "flags",
          e));

      s << i.flags ();
    }

    // isCaptain
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "isCaptain",
          e));

      s << i.isCaptain ();
    }

    // field_E8
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "field_E8",
          e));

      s << i.field_E8 ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const mapVariable_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << *i.id ();
    }

    // value
    //
    if (i.value ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "value",
          e));

      a << *i.value ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const map_t& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // hero
    //
    for (map_t::hero_const_iterator
         b (i.hero ().begin ()), n (i.hero ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "hero",
          "ironfist_map",
          e));

      s << *b;
    }

    // mapVariable
    //
    for (map_t::mapVariable_const_iterator
         b (i.mapVariable ().begin ()), n (i.mapVariable ().end ());
         b != n; ++b)
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "mapVariable",
          "ironfist_map",
          e));

      s << *b;
    }

    // script
    //
    if (i.script ())
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "script",
          "ironfist_map",
          e));

      s << *i.script ();
    }

    // raw
    //
    {
      ::xercesc::DOMElement& s (
        ::xsd::cxx::xml::dom::create_element (
          "raw",
          "ironfist_map",
          e));

      s << i.raw ();
    }
  }

  void
  map (::std::ostream& o,
       const ::ironfist_map::map_t& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::map (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  map (::std::ostream& o,
       const ::ironfist_map::map_t& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::map (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  map (::std::ostream& o,
       const ::ironfist_map::map_t& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::map (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  map (::xercesc::XMLFormatTarget& t,
       const ::ironfist_map::map_t& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::map (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  map (::xercesc::XMLFormatTarget& t,
       const ::ironfist_map::map_t& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::map (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  map (::xercesc::XMLFormatTarget& t,
       const ::ironfist_map::map_t& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::map (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  map (::xercesc::DOMDocument& d,
       const ::ironfist_map::map_t& s,
       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "map" &&
        n.namespace_ () == "ironfist_map")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "map",
        "ironfist_map");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  map (const ::ironfist_map::map_t& s,
       const ::xml_schema::namespace_infomap& m,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "map",
        "ironfist_map",
        m, f));

    ::ironfist_map::map (*d, s, f);
    return d;
  }

  void
  hero (::std::ostream& o,
        const ::ironfist_map::hero_t& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::hero (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  hero (::std::ostream& o,
        const ::ironfist_map::hero_t& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::hero (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hero (::std::ostream& o,
        const ::ironfist_map::hero_t& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::hero (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hero (::xercesc::XMLFormatTarget& t,
        const ::ironfist_map::hero_t& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::hero (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  hero (::xercesc::XMLFormatTarget& t,
        const ::ironfist_map::hero_t& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::hero (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hero (::xercesc::XMLFormatTarget& t,
        const ::ironfist_map::hero_t& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::hero (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  hero (::xercesc::DOMDocument& d,
        const ::ironfist_map::hero_t& s,
        ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "hero" &&
        n.namespace_ () == "ironfist_map")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "hero",
        "ironfist_map");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  hero (const ::ironfist_map::hero_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "hero",
        "ironfist_map",
        m, f));

    ::ironfist_map::hero (*d, s, f);
    return d;
  }

  void
  mapVariable (::std::ostream& o,
               const ::ironfist_map::mapVariable_t& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::mapVariable (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  mapVariable (::std::ostream& o,
               const ::ironfist_map::mapVariable_t& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::mapVariable (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  mapVariable (::std::ostream& o,
               const ::ironfist_map::mapVariable_t& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::mapVariable (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  mapVariable (::xercesc::XMLFormatTarget& t,
               const ::ironfist_map::mapVariable_t& s,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::mapVariable (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  mapVariable (::xercesc::XMLFormatTarget& t,
               const ::ironfist_map::mapVariable_t& s,
               ::xml_schema::error_handler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::mapVariable (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  mapVariable (::xercesc::XMLFormatTarget& t,
               const ::ironfist_map::mapVariable_t& s,
               ::xercesc::DOMErrorHandler& h,
               const ::xml_schema::namespace_infomap& m,
               const ::std::string& e,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::mapVariable (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  mapVariable (::xercesc::DOMDocument& d,
               const ::ironfist_map::mapVariable_t& s,
               ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "mapVariable" &&
        n.namespace_ () == "ironfist_map")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "mapVariable",
        "ironfist_map");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  mapVariable (const ::ironfist_map::mapVariable_t& s,
               const ::xml_schema::namespace_infomap& m,
               ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "mapVariable",
        "ironfist_map",
        m, f));

    ::ironfist_map::mapVariable (*d, s, f);
    return d;
  }

  void
  raw (::std::ostream& o,
       const ::xml_schema::base64_binary& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::raw (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  raw (::std::ostream& o,
       const ::xml_schema::base64_binary& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::raw (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  raw (::std::ostream& o,
       const ::xml_schema::base64_binary& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::raw (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  raw (::xercesc::XMLFormatTarget& t,
       const ::xml_schema::base64_binary& s,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::raw (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  raw (::xercesc::XMLFormatTarget& t,
       const ::xml_schema::base64_binary& s,
       ::xml_schema::error_handler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::raw (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  raw (::xercesc::XMLFormatTarget& t,
       const ::xml_schema::base64_binary& s,
       ::xercesc::DOMErrorHandler& h,
       const ::xml_schema::namespace_infomap& m,
       const ::std::string& e,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::raw (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  raw (::xercesc::DOMDocument& d,
       const ::xml_schema::base64_binary& s,
       ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "raw" &&
        n.namespace_ () == "ironfist_map")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "raw",
        "ironfist_map");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  raw (const ::xml_schema::base64_binary& s,
       const ::xml_schema::namespace_infomap& m,
       ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "raw",
        "ironfist_map",
        m, f));

    ::ironfist_map::raw (*d, s, f);
    return d;
  }

  void
  army (::std::ostream& o,
        const ::ironfist_map::army_t& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::army (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  army (::std::ostream& o,
        const ::ironfist_map::army_t& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::army (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  army (::std::ostream& o,
        const ::ironfist_map::army_t& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::army (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  army (::xercesc::XMLFormatTarget& t,
        const ::ironfist_map::army_t& s,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::army (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  army (::xercesc::XMLFormatTarget& t,
        const ::ironfist_map::army_t& s,
        ::xml_schema::error_handler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::army (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  army (::xercesc::XMLFormatTarget& t,
        const ::ironfist_map::army_t& s,
        ::xercesc::DOMErrorHandler& h,
        const ::xml_schema::namespace_infomap& m,
        const ::std::string& e,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::army (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  army (::xercesc::DOMDocument& d,
        const ::ironfist_map::army_t& s,
        ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "army" &&
        n.namespace_ () == "ironfist_map")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "army",
        "ironfist_map");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  army (const ::ironfist_map::army_t& s,
        const ::xml_schema::namespace_infomap& m,
        ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "army",
        "ironfist_map",
        m, f));

    ::ironfist_map::army (*d, s, f);
    return d;
  }

  void
  script (::std::ostream& o,
          const ::xml_schema::string& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::script (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  script (::std::ostream& o,
          const ::xml_schema::string& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xsd::cxx::xml::auto_initializer i (
      (f & ::xml_schema::flags::dont_initialize) == 0);

    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::script (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  script (::std::ostream& o,
          const ::xml_schema::string& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::script (s, m, f));
    ::xsd::cxx::xml::dom::ostream_format_target t (o);
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  script (::xercesc::XMLFormatTarget& t,
          const ::xml_schema::string& s,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::script (s, m, f));

    ::xsd::cxx::tree::error_handler< char > h;

    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
    }
  }

  void
  script (::xercesc::XMLFormatTarget& t,
          const ::xml_schema::string& s,
          ::xml_schema::error_handler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::script (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  script (::xercesc::XMLFormatTarget& t,
          const ::xml_schema::string& s,
          ::xercesc::DOMErrorHandler& h,
          const ::xml_schema::namespace_infomap& m,
          const ::std::string& e,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::ironfist_map::script (s, m, f));
    if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
    {
      throw ::xsd::cxx::tree::serialization< char > ();
    }
  }

  void
  script (::xercesc::DOMDocument& d,
          const ::xml_schema::string& s,
          ::xml_schema::flags)
  {
    ::xercesc::DOMElement& e (*d.getDocumentElement ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (e));

    if (n.name () == "script" &&
        n.namespace_ () == "ironfist_map")
    {
      e << s;
    }
    else
    {
      throw ::xsd::cxx::tree::unexpected_element < char > (
        n.name (),
        n.namespace_ (),
        "script",
        "ironfist_map");
    }
  }

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
  script (const ::xml_schema::string& s,
          const ::xml_schema::namespace_infomap& m,
          ::xml_schema::flags f)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
      ::xsd::cxx::xml::dom::serialize< char > (
        "script",
        "ironfist_map",
        m, f));

    ::ironfist_map::script (*d, s, f);
    return d;
  }

  void
  operator<< (::xercesc::DOMElement& e, const secondarySkill& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    if (i.id ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << *i.id ();
    }

    // level
    //
    if (i.level ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "level",
          e));

      a << *i.level ();
    }

    // idx
    //
    if (i.idx ())
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "idx",
          e));

      a << *i.idx ();
    }
  }

  void
  operator<< (::xercesc::DOMElement& e, const artifact& i)
  {
    e << static_cast< const ::xml_schema::type& > (i);

    // id
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "id",
          e));

      a << i.id ();
    }

    // spell
    //
    {
      ::xercesc::DOMAttr& a (
        ::xsd::cxx::xml::dom::create_attribute (
          "spell",
          e));

      a << i.spell ();
    }
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

