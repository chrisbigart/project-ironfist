// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef C__DOCUMENTS_AND_SETTINGS_JAMES_KOPPEL_MY_DOCUMENTS_DROPBOX_IRONFIST_HG_GAME_CREATION_IRONFIST_XML_CREATURES_XML_HXX
#define C__DOCUMENTS_AND_SETTINGS_JAMES_KOPPEL_MY_DOCUMENTS_DROPBOX_IRONFIST_HG_GAME_CREATION_IRONFIST_XML_CREATURES_XML_HXX

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class creatures_t;
class damage_t;
class random_spawn_t;
class creature_attribute_t;
class creature_t;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class creatures_t: public ::xml_schema::type
{
  public:
  // creature
  // 
  typedef ::creature_t creature_type;
  typedef ::xsd::cxx::tree::sequence< creature_type > creature_sequence;
  typedef creature_sequence::iterator creature_iterator;
  typedef creature_sequence::const_iterator creature_const_iterator;
  typedef ::xsd::cxx::tree::traits< creature_type, char > creature_traits;

  const creature_sequence&
  creature () const;

  creature_sequence&
  creature ();

  void
  creature (const creature_sequence& s);

  // Constructors.
  //
  creatures_t ();

  creatures_t (const ::xercesc::DOMElement& e,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  creatures_t (const creatures_t& x,
               ::xml_schema::flags f = 0,
               ::xml_schema::container* c = 0);

  virtual creatures_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~creatures_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  creature_sequence creature_;
};

class damage_t: public ::xml_schema::type
{
  public:
  // minimum
  // 
  typedef ::xml_schema::int_ minimum_type;
  typedef ::xsd::cxx::tree::traits< minimum_type, char > minimum_traits;

  const minimum_type&
  minimum () const;

  minimum_type&
  minimum ();

  void
  minimum (const minimum_type& x);

  // maximum
  // 
  typedef ::xml_schema::int_ maximum_type;
  typedef ::xsd::cxx::tree::traits< maximum_type, char > maximum_traits;

  const maximum_type&
  maximum () const;

  maximum_type&
  maximum ();

  void
  maximum (const maximum_type& x);

  // Constructors.
  //
  damage_t (const minimum_type&,
            const maximum_type&);

  damage_t (const ::xercesc::DOMElement& e,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  damage_t (const damage_t& x,
            ::xml_schema::flags f = 0,
            ::xml_schema::container* c = 0);

  virtual damage_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~damage_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< minimum_type > minimum_;
  ::xsd::cxx::tree::one< maximum_type > maximum_;
};

class random_spawn_t: public ::xml_schema::type
{
  public:
  // minimum
  // 
  typedef ::xml_schema::int_ minimum_type;
  typedef ::xsd::cxx::tree::traits< minimum_type, char > minimum_traits;

  const minimum_type&
  minimum () const;

  minimum_type&
  minimum ();

  void
  minimum (const minimum_type& x);

  // maximum
  // 
  typedef ::xml_schema::int_ maximum_type;
  typedef ::xsd::cxx::tree::traits< maximum_type, char > maximum_traits;

  const maximum_type&
  maximum () const;

  maximum_type&
  maximum ();

  void
  maximum (const maximum_type& x);

  // Constructors.
  //
  random_spawn_t (const minimum_type&,
                  const maximum_type&);

  random_spawn_t (const ::xercesc::DOMElement& e,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  random_spawn_t (const random_spawn_t& x,
                  ::xml_schema::flags f = 0,
                  ::xml_schema::container* c = 0);

  virtual random_spawn_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~random_spawn_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< minimum_type > minimum_;
  ::xsd::cxx::tree::one< maximum_type > maximum_;
};

class creature_attribute_t: public ::xml_schema::type
{
  public:
  // name
  // 
  typedef ::xml_schema::string name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // Constructors.
  //
  creature_attribute_t (const name_type&);

  creature_attribute_t (const ::xercesc::DOMElement& e,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  creature_attribute_t (const creature_attribute_t& x,
                        ::xml_schema::flags f = 0,
                        ::xml_schema::container* c = 0);

  virtual creature_attribute_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~creature_attribute_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< name_type > name_;
};

class creature_t: public ::xml_schema::type
{
  public:
  // damage
  // 
  typedef ::damage_t damage_type;
  typedef ::xsd::cxx::tree::sequence< damage_type > damage_sequence;
  typedef damage_sequence::iterator damage_iterator;
  typedef damage_sequence::const_iterator damage_const_iterator;
  typedef ::xsd::cxx::tree::traits< damage_type, char > damage_traits;

  const damage_sequence&
  damage () const;

  damage_sequence&
  damage ();

  void
  damage (const damage_sequence& s);

  // random-spawn
  // 
  typedef ::random_spawn_t random_spawn_type;
  typedef ::xsd::cxx::tree::sequence< random_spawn_type > random_spawn_sequence;
  typedef random_spawn_sequence::iterator random_spawn_iterator;
  typedef random_spawn_sequence::const_iterator random_spawn_const_iterator;
  typedef ::xsd::cxx::tree::traits< random_spawn_type, char > random_spawn_traits;

  const random_spawn_sequence&
  random_spawn () const;

  random_spawn_sequence&
  random_spawn ();

  void
  random_spawn (const random_spawn_sequence& s);

  // creature-attribute
  // 
  typedef ::creature_attribute_t creature_attribute_type;
  typedef ::xsd::cxx::tree::sequence< creature_attribute_type > creature_attribute_sequence;
  typedef creature_attribute_sequence::iterator creature_attribute_iterator;
  typedef creature_attribute_sequence::const_iterator creature_attribute_const_iterator;
  typedef ::xsd::cxx::tree::traits< creature_attribute_type, char > creature_attribute_traits;

  const creature_attribute_sequence&
  creature_attribute () const;

  creature_attribute_sequence&
  creature_attribute ();

  void
  creature_attribute (const creature_attribute_sequence& s);

  // id
  // 
  typedef ::xml_schema::int_ id_type;
  typedef ::xsd::cxx::tree::traits< id_type, char > id_traits;

  const id_type&
  id () const;

  id_type&
  id ();

  void
  id (const id_type& x);

  // name-singular
  // 
  typedef ::xml_schema::string name_singular_type;
  typedef ::xsd::cxx::tree::traits< name_singular_type, char > name_singular_traits;

  const name_singular_type&
  name_singular () const;

  name_singular_type&
  name_singular ();

  void
  name_singular (const name_singular_type& x);

  void
  name_singular (::std::auto_ptr< name_singular_type > p);

  // name-plural
  // 
  typedef ::xml_schema::string name_plural_type;
  typedef ::xsd::cxx::tree::traits< name_plural_type, char > name_plural_traits;

  const name_plural_type&
  name_plural () const;

  name_plural_type&
  name_plural ();

  void
  name_plural (const name_plural_type& x);

  void
  name_plural (::std::auto_ptr< name_plural_type > p);

  // icn
  // 
  typedef ::xml_schema::string icn_type;
  typedef ::xsd::cxx::tree::traits< icn_type, char > icn_traits;

  const icn_type&
  icn () const;

  icn_type&
  icn ();

  void
  icn (const icn_type& x);

  void
  icn (::std::auto_ptr< icn_type > p);

  // frm
  // 
  typedef ::xml_schema::string frm_type;
  typedef ::xsd::cxx::tree::traits< frm_type, char > frm_traits;

  const frm_type&
  frm () const;

  frm_type&
  frm ();

  void
  frm (const frm_type& x);

  void
  frm (::std::auto_ptr< frm_type > p);

  // cost
  // 
  typedef ::xml_schema::int_ cost_type;
  typedef ::xsd::cxx::tree::traits< cost_type, char > cost_traits;

  const cost_type&
  cost () const;

  cost_type&
  cost ();

  void
  cost (const cost_type& x);

  // fight-value
  // 
  typedef ::xml_schema::int_ fight_value_type;
  typedef ::xsd::cxx::tree::traits< fight_value_type, char > fight_value_traits;

  const fight_value_type&
  fight_value () const;

  fight_value_type&
  fight_value ();

  void
  fight_value (const fight_value_type& x);

  // fight-value-aux
  // 
  typedef ::xml_schema::int_ fight_value_aux_type;
  typedef ::xsd::cxx::tree::traits< fight_value_aux_type, char > fight_value_aux_traits;

  const fight_value_aux_type&
  fight_value_aux () const;

  fight_value_aux_type&
  fight_value_aux ();

  void
  fight_value_aux (const fight_value_aux_type& x);

  // growth
  // 
  typedef ::xml_schema::int_ growth_type;
  typedef ::xsd::cxx::tree::traits< growth_type, char > growth_traits;

  const growth_type&
  growth () const;

  growth_type&
  growth ();

  void
  growth (const growth_type& x);

  // hp
  // 
  typedef ::xml_schema::int_ hp_type;
  typedef ::xsd::cxx::tree::traits< hp_type, char > hp_traits;

  const hp_type&
  hp () const;

  hp_type&
  hp ();

  void
  hp (const hp_type& x);

  // faction
  // 
  typedef ::xml_schema::int_ faction_type;
  typedef ::xsd::cxx::tree::traits< faction_type, char > faction_traits;

  const faction_type&
  faction () const;

  faction_type&
  faction ();

  void
  faction (const faction_type& x);

  // speed
  // 
  typedef ::xml_schema::int_ speed_type;
  typedef ::xsd::cxx::tree::traits< speed_type, char > speed_traits;

  const speed_type&
  speed () const;

  speed_type&
  speed ();

  void
  speed (const speed_type& x);

  // attack
  // 
  typedef ::xml_schema::int_ attack_type;
  typedef ::xsd::cxx::tree::traits< attack_type, char > attack_traits;

  const attack_type&
  attack () const;

  attack_type&
  attack ();

  void
  attack (const attack_type& x);

  // defense
  // 
  typedef ::xml_schema::int_ defense_type;
  typedef ::xsd::cxx::tree::traits< defense_type, char > defense_traits;

  const defense_type&
  defense () const;

  defense_type&
  defense ();

  void
  defense (const defense_type& x);

  // shots
  // 
  typedef ::xml_schema::int_ shots_type;
  typedef ::xsd::cxx::tree::traits< shots_type, char > shots_traits;

  const shots_type&
  shots () const;

  shots_type&
  shots ();

  void
  shots (const shots_type& x);

  // short-name
  // 
  typedef ::xml_schema::string short_name_type;
  typedef ::xsd::cxx::tree::traits< short_name_type, char > short_name_traits;

  const short_name_type&
  short_name () const;

  short_name_type&
  short_name ();

  void
  short_name (const short_name_type& x);

  void
  short_name (::std::auto_ptr< short_name_type > p);

  // Constructors.
  //
  creature_t (const id_type&,
              const name_singular_type&,
              const name_plural_type&,
              const icn_type&,
              const frm_type&,
              const cost_type&,
              const fight_value_type&,
              const fight_value_aux_type&,
              const growth_type&,
              const hp_type&,
              const faction_type&,
              const speed_type&,
              const attack_type&,
              const defense_type&,
              const shots_type&,
              const short_name_type&);

  creature_t (const ::xercesc::DOMElement& e,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  creature_t (const creature_t& x,
              ::xml_schema::flags f = 0,
              ::xml_schema::container* c = 0);

  virtual creature_t*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~creature_t ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  damage_sequence damage_;
  random_spawn_sequence random_spawn_;
  creature_attribute_sequence creature_attribute_;
  ::xsd::cxx::tree::one< id_type > id_;
  ::xsd::cxx::tree::one< name_singular_type > name_singular_;
  ::xsd::cxx::tree::one< name_plural_type > name_plural_;
  ::xsd::cxx::tree::one< icn_type > icn_;
  ::xsd::cxx::tree::one< frm_type > frm_;
  ::xsd::cxx::tree::one< cost_type > cost_;
  ::xsd::cxx::tree::one< fight_value_type > fight_value_;
  ::xsd::cxx::tree::one< fight_value_aux_type > fight_value_aux_;
  ::xsd::cxx::tree::one< growth_type > growth_;
  ::xsd::cxx::tree::one< hp_type > hp_;
  ::xsd::cxx::tree::one< faction_type > faction_;
  ::xsd::cxx::tree::one< speed_type > speed_;
  ::xsd::cxx::tree::one< attack_type > attack_;
  ::xsd::cxx::tree::one< defense_type > defense_;
  ::xsd::cxx::tree::one< shots_type > shots_;
  ::xsd::cxx::tree::one< short_name_type > short_name_;
};

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::creatures_t >
creatures (const ::std::string& uri,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creatures_t >
creatures (const ::std::string& uri,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creatures_t >
creatures (const ::std::string& uri,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::creatures_t >
creatures (::std::istream& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creatures_t >
creatures (::std::istream& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creatures_t >
creatures (::std::istream& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creatures_t >
creatures (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creatures_t >
creatures (::std::istream& is,
           const ::std::string& id,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creatures_t >
creatures (::std::istream& is,
           const ::std::string& id,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::creatures_t >
creatures (::xercesc::InputSource& is,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creatures_t >
creatures (::xercesc::InputSource& is,
           ::xml_schema::error_handler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creatures_t >
creatures (::xercesc::InputSource& is,
           ::xercesc::DOMErrorHandler& eh,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::creatures_t >
creatures (const ::xercesc::DOMDocument& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creatures_t >
creatures (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
           ::xml_schema::flags f = 0,
           const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::creature_t >
creature (const ::std::string& uri,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_t >
creature (const ::std::string& uri,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_t >
creature (const ::std::string& uri,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::creature_t >
creature (::std::istream& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_t >
creature (::std::istream& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_t >
creature (::std::istream& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_t >
creature (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_t >
creature (::std::istream& is,
          const ::std::string& id,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_t >
creature (::std::istream& is,
          const ::std::string& id,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::creature_t >
creature (::xercesc::InputSource& is,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_t >
creature (::xercesc::InputSource& is,
          ::xml_schema::error_handler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_t >
creature (::xercesc::InputSource& is,
          ::xercesc::DOMErrorHandler& eh,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::creature_t >
creature (const ::xercesc::DOMDocument& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_t >
creature (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
          ::xml_schema::flags f = 0,
          const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::damage_t >
damage (const ::std::string& uri,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::damage_t >
damage (const ::std::string& uri,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::damage_t >
damage (const ::std::string& uri,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::damage_t >
damage (::std::istream& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::damage_t >
damage (::std::istream& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::damage_t >
damage (::std::istream& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::damage_t >
damage (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::damage_t >
damage (::std::istream& is,
        const ::std::string& id,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::damage_t >
damage (::std::istream& is,
        const ::std::string& id,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::damage_t >
damage (::xercesc::InputSource& is,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::damage_t >
damage (::xercesc::InputSource& is,
        ::xml_schema::error_handler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::damage_t >
damage (::xercesc::InputSource& is,
        ::xercesc::DOMErrorHandler& eh,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::damage_t >
damage (const ::xercesc::DOMDocument& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::damage_t >
damage (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
        ::xml_schema::flags f = 0,
        const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::random_spawn_t >
random_spawn (const ::std::string& uri,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::random_spawn_t >
random_spawn (const ::std::string& uri,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::random_spawn_t >
random_spawn (const ::std::string& uri,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::random_spawn_t >
random_spawn (::std::istream& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::random_spawn_t >
random_spawn (::std::istream& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::random_spawn_t >
random_spawn (::std::istream& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::random_spawn_t >
random_spawn (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::random_spawn_t >
random_spawn (::std::istream& is,
              const ::std::string& id,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::random_spawn_t >
random_spawn (::std::istream& is,
              const ::std::string& id,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::random_spawn_t >
random_spawn (::xercesc::InputSource& is,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::random_spawn_t >
random_spawn (::xercesc::InputSource& is,
              ::xml_schema::error_handler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::random_spawn_t >
random_spawn (::xercesc::InputSource& is,
              ::xercesc::DOMErrorHandler& eh,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::random_spawn_t >
random_spawn (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::random_spawn_t >
random_spawn (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f = 0,
              const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse a URI or a local file.
//

::std::auto_ptr< ::creature_attribute_t >
creature_attribute (const ::std::string& uri,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_attribute_t >
creature_attribute (const ::std::string& uri,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_attribute_t >
creature_attribute (const ::std::string& uri,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::creature_attribute_t >
creature_attribute (::std::istream& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_attribute_t >
creature_attribute (::std::istream& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_attribute_t >
creature_attribute (::std::istream& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_attribute_t >
creature_attribute (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_attribute_t >
creature_attribute (::std::istream& is,
                    const ::std::string& id,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_attribute_t >
creature_attribute (::std::istream& is,
                    const ::std::string& id,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::creature_attribute_t >
creature_attribute (::xercesc::InputSource& is,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_attribute_t >
creature_attribute (::xercesc::InputSource& is,
                    ::xml_schema::error_handler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_attribute_t >
creature_attribute (::xercesc::InputSource& is,
                    ::xercesc::DOMErrorHandler& eh,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::creature_attribute_t >
creature_attribute (const ::xercesc::DOMDocument& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::creature_attribute_t >
creature_attribute (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
                    ::xml_schema::flags f = 0,
                    const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // C__DOCUMENTS_AND_SETTINGS_JAMES_KOPPEL_MY_DOCUMENTS_DROPBOX_IRONFIST_HG_GAME_CREATION_IRONFIST_XML_CREATURES_XML_HXX
